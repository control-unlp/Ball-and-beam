
bb_v001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003794  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000211c  080038a4  080038a4  000048a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c0  080059c0  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080059c0  080059c0  0000706c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080059c0  080059c0  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c0  080059c0  000069c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059c4  080059c4  000069c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080059c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  2000006c  08005a34  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  08005a34  0000769c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8a1  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd3  00000000  00000000  00012936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00014910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a68  00000000  00000000  00015670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184f4  00000000  00000000  000160d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a81  00000000  00000000  0002e5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ade8  00000000  00000000  0003f04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9e35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db4  00000000  00000000  000c9e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000cdc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800388c 	.word	0x0800388c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	0800388c 	.word	0x0800388c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000940:	4b33      	ldr	r3, [pc, #204]	@ (8000a10 <MX_GPIO_Init+0xe4>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a32      	ldr	r2, [pc, #200]	@ (8000a10 <MX_GPIO_Init+0xe4>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b30      	ldr	r3, [pc, #192]	@ (8000a10 <MX_GPIO_Init+0xe4>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000958:	4b2d      	ldr	r3, [pc, #180]	@ (8000a10 <MX_GPIO_Init+0xe4>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a2c      	ldr	r2, [pc, #176]	@ (8000a10 <MX_GPIO_Init+0xe4>)
 800095e:	f043 0320 	orr.w	r3, r3, #32
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <MX_GPIO_Init+0xe4>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0320 	and.w	r3, r3, #32
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b27      	ldr	r3, [pc, #156]	@ (8000a10 <MX_GPIO_Init+0xe4>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a26      	ldr	r2, [pc, #152]	@ (8000a10 <MX_GPIO_Init+0xe4>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <MX_GPIO_Init+0xe4>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0304 	and.w	r3, r3, #4
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000988:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <MX_GPIO_Init+0xe4>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a20      	ldr	r2, [pc, #128]	@ (8000a10 <MX_GPIO_Init+0xe4>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_GPIO_Init+0xe4>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0308 	and.w	r3, r3, #8
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_AZUL_GPIO_Port, LED_AZUL_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a6:	481b      	ldr	r0, [pc, #108]	@ (8000a14 <MX_GPIO_Init+0xe8>)
 80009a8:	f000 ff97 	bl	80018da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2108      	movs	r1, #8
 80009b0:	4819      	ldr	r0, [pc, #100]	@ (8000a18 <MX_GPIO_Init+0xec>)
 80009b2:	f000 ff92 	bl	80018da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_AZUL_Pin */
  GPIO_InitStruct.Pin = LED_AZUL_Pin;
 80009b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_AZUL_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4619      	mov	r1, r3
 80009ce:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <MX_GPIO_Init+0xe8>)
 80009d0:	f000 fde8 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009d4:	2308      	movs	r3, #8
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <MX_GPIO_Init+0xec>)
 80009ec:	f000 fdda 	bl	80015a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009f0:	2310      	movs	r3, #16
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	4619      	mov	r1, r3
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_GPIO_Init+0xec>)
 8000a04:	f000 fdce 	bl	80015a4 <HAL_GPIO_Init>

}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40011000 	.word	0x40011000
 8000a18:	40010800 	.word	0x40010800

08000a1c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_I2C1_Init+0x50>)
 8000a22:	4a13      	ldr	r2, [pc, #76]	@ (8000a70 <MX_I2C1_Init+0x54>)
 8000a24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_I2C1_Init+0x50>)
 8000a28:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <MX_I2C1_Init+0x58>)
 8000a2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_I2C1_Init+0x50>)
 8000a3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <MX_I2C1_Init+0x50>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_I2C1_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_I2C1_Init+0x50>)
 8000a5a:	f000 ff57 	bl	800190c <HAL_I2C_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a64:	f000 f936 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000088 	.word	0x20000088
 8000a70:	40005400 	.word	0x40005400
 8000a74:	00061a80 	.word	0x00061a80

08000a78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a15      	ldr	r2, [pc, #84]	@ (8000ae8 <HAL_I2C_MspInit+0x70>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d123      	bne.n	8000ae0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <HAL_I2C_MspInit+0x74>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a13      	ldr	r2, [pc, #76]	@ (8000aec <HAL_I2C_MspInit+0x74>)
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <HAL_I2C_MspInit+0x74>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0308 	and.w	r3, r3, #8
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ab0:	23c0      	movs	r3, #192	@ 0xc0
 8000ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab4:	2312      	movs	r3, #18
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <HAL_I2C_MspInit+0x78>)
 8000ac4:	f000 fd6e 	bl	80015a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <HAL_I2C_MspInit+0x74>)
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	4a07      	ldr	r2, [pc, #28]	@ (8000aec <HAL_I2C_MspInit+0x74>)
 8000ace:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ad2:	61d3      	str	r3, [r2, #28]
 8000ad4:	4b05      	ldr	r3, [pc, #20]	@ (8000aec <HAL_I2C_MspInit+0x74>)
 8000ad6:	69db      	ldr	r3, [r3, #28]
 8000ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40005400 	.word	0x40005400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	00000000 	.word	0x00000000

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b598      	push	{r3, r4, r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afc:	f000 fbe8 	bl	80012d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b00:	f000 f8ac 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b04:	f7ff ff12 	bl	800092c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b08:	f7ff ff88 	bl	8000a1c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000b0c:	f000 fb4c 	bl	80011a8 <MX_TIM1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2108      	movs	r1, #8
 8000b14:	4846      	ldr	r0, [pc, #280]	@ (8000c30 <main+0x138>)
 8000b16:	f000 fee0 	bl	80018da <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000b1a:	4b46      	ldr	r3, [pc, #280]	@ (8000c34 <main+0x13c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000b22:	bf00      	nop
 8000b24:	4b43      	ldr	r3, [pc, #268]	@ (8000c34 <main+0x13c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b2a:	2b09      	cmp	r3, #9
 8000b2c:	d9fa      	bls.n	8000b24 <main+0x2c>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2108      	movs	r1, #8
 8000b32:	483f      	ldr	r0, [pc, #252]	@ (8000c30 <main+0x138>)
 8000b34:	f000 fed1 	bl	80018da <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick();
 8000b38:	f000 fc22 	bl	8001380 <HAL_GetTick>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c38 <main+0x140>)
 8000b40:	6013      	str	r3, [r2, #0]
	while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000b42:	bf00      	nop
 8000b44:	2110      	movs	r1, #16
 8000b46:	483a      	ldr	r0, [pc, #232]	@ (8000c30 <main+0x138>)
 8000b48:	f000 feb0 	bl	80018ac <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d108      	bne.n	8000b64 <main+0x6c>
 8000b52:	4b39      	ldr	r3, [pc, #228]	@ (8000c38 <main+0x140>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f103 040a 	add.w	r4, r3, #10
 8000b5a:	f000 fc11 	bl	8001380 <HAL_GetTick>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	429c      	cmp	r4, r3
 8000b62:	d8ef      	bhi.n	8000b44 <main+0x4c>
	val1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000b64:	4b33      	ldr	r3, [pc, #204]	@ (8000c34 <main+0x13c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b6a:	4a34      	ldr	r2, [pc, #208]	@ (8000c3c <main+0x144>)
 8000b6c:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick();
 8000b6e:	f000 fc07 	bl	8001380 <HAL_GetTick>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a30      	ldr	r2, [pc, #192]	@ (8000c38 <main+0x140>)
 8000b76:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000b78:	bf00      	nop
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	482c      	ldr	r0, [pc, #176]	@ (8000c30 <main+0x138>)
 8000b7e:	f000 fe95 	bl	80018ac <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d008      	beq.n	8000b9a <main+0xa2>
 8000b88:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <main+0x140>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000b90:	f000 fbf6 	bl	8001380 <HAL_GetTick>
 8000b94:	4603      	mov	r3, r0
 8000b96:	429c      	cmp	r4, r3
 8000b98:	d8ef      	bhi.n	8000b7a <main+0x82>
	val2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000b9a:	4b26      	ldr	r3, [pc, #152]	@ (8000c34 <main+0x13c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ba0:	4a27      	ldr	r2, [pc, #156]	@ (8000c40 <main+0x148>)
 8000ba2:	6013      	str	r3, [r2, #0]

	distance = (val2-val1)* 0.034/2;
 8000ba4:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <main+0x148>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b24      	ldr	r3, [pc, #144]	@ (8000c3c <main+0x144>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fc10 	bl	80003d4 <__aeabi_ui2d>
 8000bb4:	a31c      	add	r3, pc, #112	@ (adr r3, 8000c28 <main+0x130>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fc85 	bl	80004c8 <__aeabi_dmul>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f04f 0200 	mov.w	r2, #0
 8000bca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bce:	f7ff fda5 	bl	800071c <__aeabi_ddiv>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	4610      	mov	r0, r2
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f7ff fe87 	bl	80008ec <__aeabi_d2uiz>
 8000bde:	4603      	mov	r3, r0
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <main+0x14c>)
 8000be4:	801a      	strh	r2, [r3, #0]

	SSD1306_GotoXY (20, 0);
 8000be6:	2100      	movs	r1, #0
 8000be8:	2014      	movs	r0, #20
 8000bea:	f000 f905 	bl	8000df8 <SSD1306_GotoXY>
	SSD1306_Puts ("Distance", &Font_11x18, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4915      	ldr	r1, [pc, #84]	@ (8000c48 <main+0x150>)
 8000bf2:	4816      	ldr	r0, [pc, #88]	@ (8000c4c <main+0x154>)
 8000bf4:	f000 f994 	bl	8000f20 <SSD1306_Puts>
	sprintf(string,"%d    ", distance);
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <main+0x14c>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4914      	ldr	r1, [pc, #80]	@ (8000c50 <main+0x158>)
 8000c00:	4814      	ldr	r0, [pc, #80]	@ (8000c54 <main+0x15c>)
 8000c02:	f002 f993 	bl	8002f2c <siprintf>
	SSD1306_GotoXY (55, 30);
 8000c06:	211e      	movs	r1, #30
 8000c08:	2037      	movs	r0, #55	@ 0x37
 8000c0a:	f000 f8f5 	bl	8000df8 <SSD1306_GotoXY>
	SSD1306_Puts (string, &Font_16x26, 1);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4911      	ldr	r1, [pc, #68]	@ (8000c58 <main+0x160>)
 8000c12:	4810      	ldr	r0, [pc, #64]	@ (8000c54 <main+0x15c>)
 8000c14:	f000 f984 	bl	8000f20 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000c18:	f000 f862 	bl	8000ce0 <SSD1306_UpdateScreen>
	HAL_Delay(50);
 8000c1c:	2032      	movs	r0, #50	@ 0x32
 8000c1e:	f000 fbb9 	bl	8001394 <HAL_Delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000c22:	e775      	b.n	8000b10 <main+0x18>
 8000c24:	f3af 8000 	nop.w
 8000c28:	b020c49c 	.word	0xb020c49c
 8000c2c:	3fa16872 	.word	0x3fa16872
 8000c30:	40010800 	.word	0x40010800
 8000c34:	20000508 	.word	0x20000508
 8000c38:	200000dc 	.word	0x200000dc
 8000c3c:	200000e0 	.word	0x200000e0
 8000c40:	200000e4 	.word	0x200000e4
 8000c44:	200000e8 	.word	0x200000e8
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	080038a4 	.word	0x080038a4
 8000c50:	080038b0 	.word	0x080038b0
 8000c54:	200000ec 	.word	0x200000ec
 8000c58:	20000008 	.word	0x20000008

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b090      	sub	sp, #64	@ 0x40
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 0318 	add.w	r3, r7, #24
 8000c66:	2228      	movs	r2, #40	@ 0x28
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 f980 	bl	8002f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c82:	2301      	movs	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c86:	2310      	movs	r3, #16
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fad6 	bl	8002244 <HAL_RCC_OscConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c9e:	f000 f819 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fd43 	bl	8002748 <HAL_RCC_ClockConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000cc8:	f000 f804 	bl	8000cd4 <Error_Handler>
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3740      	adds	r7, #64	@ 0x40
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <Error_Handler+0x8>

08000ce0 <SSD1306_UpdateScreen>:
	
	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	71fb      	strb	r3, [r7, #7]
 8000cea:	e01d      	b.n	8000d28 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	3b50      	subs	r3, #80	@ 0x50
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2078      	movs	r0, #120	@ 0x78
 8000cf8:	f000 f99e 	bl	8001038 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2078      	movs	r0, #120	@ 0x78
 8000d02:	f000 f999 	bl	8001038 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d06:	2210      	movs	r2, #16
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2078      	movs	r0, #120	@ 0x78
 8000d0c:	f000 f994 	bl	8001038 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	01db      	lsls	r3, r3, #7
 8000d14:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <SSD1306_UpdateScreen+0x58>)
 8000d16:	441a      	add	r2, r3
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	2140      	movs	r1, #64	@ 0x40
 8000d1c:	2078      	movs	r0, #120	@ 0x78
 8000d1e:	f000 f925 	bl	8000f6c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	3301      	adds	r3, #1
 8000d26:	71fb      	strb	r3, [r7, #7]
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	2b07      	cmp	r3, #7
 8000d2c:	d9de      	bls.n	8000cec <SSD1306_UpdateScreen+0xc>
	}
}
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000fc 	.word	0x200000fc

08000d3c <SSD1306_DrawPixel>:
void SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
}

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
 8000d46:	460b      	mov	r3, r1
 8000d48:	80bb      	strh	r3, [r7, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	70fb      	strb	r3, [r7, #3]
	if (
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d52:	d848      	bhi.n	8000de6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d58:	d845      	bhi.n	8000de6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000d5a:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <SSD1306_DrawPixel+0xb4>)
 8000d5c:	791b      	ldrb	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bf0c      	ite	eq
 8000d68:	2301      	moveq	r3, #1
 8000d6a:	2300      	movne	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d11a      	bne.n	8000dac <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d76:	88fa      	ldrh	r2, [r7, #6]
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	b298      	uxth	r0, r3
 8000d7e:	4603      	mov	r3, r0
 8000d80:	01db      	lsls	r3, r3, #7
 8000d82:	4413      	add	r3, r2
 8000d84:	4a1b      	ldr	r2, [pc, #108]	@ (8000df4 <SSD1306_DrawPixel+0xb8>)
 8000d86:	5cd3      	ldrb	r3, [r2, r3]
 8000d88:	b25a      	sxtb	r2, r3
 8000d8a:	88bb      	ldrh	r3, [r7, #4]
 8000d8c:	f003 0307 	and.w	r3, r3, #7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b259      	sxtb	r1, r3
 8000d9c:	88fa      	ldrh	r2, [r7, #6]
 8000d9e:	4603      	mov	r3, r0
 8000da0:	01db      	lsls	r3, r3, #7
 8000da2:	4413      	add	r3, r2
 8000da4:	b2c9      	uxtb	r1, r1
 8000da6:	4a13      	ldr	r2, [pc, #76]	@ (8000df4 <SSD1306_DrawPixel+0xb8>)
 8000da8:	54d1      	strb	r1, [r2, r3]
 8000daa:	e01d      	b.n	8000de8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dac:	88fa      	ldrh	r2, [r7, #6]
 8000dae:	88bb      	ldrh	r3, [r7, #4]
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	b298      	uxth	r0, r3
 8000db4:	4603      	mov	r3, r0
 8000db6:	01db      	lsls	r3, r3, #7
 8000db8:	4413      	add	r3, r2
 8000dba:	4a0e      	ldr	r2, [pc, #56]	@ (8000df4 <SSD1306_DrawPixel+0xb8>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	b25a      	sxtb	r2, r3
 8000dc0:	88bb      	ldrh	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	b259      	sxtb	r1, r3
 8000dd6:	88fa      	ldrh	r2, [r7, #6]
 8000dd8:	4603      	mov	r3, r0
 8000dda:	01db      	lsls	r3, r3, #7
 8000ddc:	4413      	add	r3, r2
 8000dde:	b2c9      	uxtb	r1, r1
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <SSD1306_DrawPixel+0xb8>)
 8000de2:	54d1      	strb	r1, [r2, r3]
 8000de4:	e000      	b.n	8000de8 <SSD1306_DrawPixel+0xac>
		return;
 8000de6:	bf00      	nop
	}
}
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	200004fc 	.word	0x200004fc
 8000df4:	200000fc 	.word	0x200000fc

08000df8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460a      	mov	r2, r1
 8000e02:	80fb      	strh	r3, [r7, #6]
 8000e04:	4613      	mov	r3, r2
 8000e06:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e08:	4a05      	ldr	r2, [pc, #20]	@ (8000e20 <SSD1306_GotoXY+0x28>)
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <SSD1306_GotoXY+0x28>)
 8000e10:	88bb      	ldrh	r3, [r7, #4]
 8000e12:	8053      	strh	r3, [r2, #2]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200004fc 	.word	0x200004fc

08000e24 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e34:	4b39      	ldr	r3, [pc, #228]	@ (8000f1c <SSD1306_Putc+0xf8>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
	if (
 8000e40:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e42:	dc07      	bgt.n	8000e54 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e44:	4b35      	ldr	r3, [pc, #212]	@ (8000f1c <SSD1306_Putc+0xf8>)
 8000e46:	885b      	ldrh	r3, [r3, #2]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	785b      	ldrb	r3, [r3, #1]
 8000e4e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e50:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e52:	dd01      	ble.n	8000e58 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	e05d      	b.n	8000f14 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e04b      	b.n	8000ef6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	3b20      	subs	r3, #32
 8000e66:	6839      	ldr	r1, [r7, #0]
 8000e68:	7849      	ldrb	r1, [r1, #1]
 8000e6a:	fb01 f303 	mul.w	r3, r1, r3
 8000e6e:	4619      	mov	r1, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	440b      	add	r3, r1
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	e030      	b.n	8000ee4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d010      	beq.n	8000eb4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000e92:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <SSD1306_Putc+0xf8>)
 8000e94:	881a      	ldrh	r2, [r3, #0]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b298      	uxth	r0, r3
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <SSD1306_Putc+0xf8>)
 8000ea0:	885a      	ldrh	r2, [r3, #2]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	4413      	add	r3, r2
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	79ba      	ldrb	r2, [r7, #6]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f7ff ff45 	bl	8000d3c <SSD1306_DrawPixel>
 8000eb2:	e014      	b.n	8000ede <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000eb4:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <SSD1306_Putc+0xf8>)
 8000eb6:	881a      	ldrh	r2, [r3, #0]
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b298      	uxth	r0, r3
 8000ec0:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <SSD1306_Putc+0xf8>)
 8000ec2:	885a      	ldrh	r2, [r3, #2]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	4413      	add	r3, r2
 8000eca:	b299      	uxth	r1, r3
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf0c      	ite	eq
 8000ed2:	2301      	moveq	r3, #1
 8000ed4:	2300      	movne	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f7ff ff2f 	bl	8000d3c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d3c8      	bcc.n	8000e82 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	785b      	ldrb	r3, [r3, #1]
 8000efa:	461a      	mov	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d3ad      	bcc.n	8000e5e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SSD1306_Putc+0xf8>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <SSD1306_Putc+0xf8>)
 8000f10:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200004fc 	.word	0x200004fc

08000f20 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f2e:	e012      	b.n	8000f56 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	79fa      	ldrb	r2, [r7, #7]
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff73 	bl	8000e24 <SSD1306_Putc>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d002      	beq.n	8000f50 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	e008      	b.n	8000f62 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1e8      	bne.n	8000f30 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	781b      	ldrb	r3, [r3, #0]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b0c7      	sub	sp, #284	@ 0x11c
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	4604      	mov	r4, r0
 8000f74:	4608      	mov	r0, r1
 8000f76:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000f7a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000f7e:	600a      	str	r2, [r1, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f86:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000f8a:	4622      	mov	r2, r4
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f92:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000f96:	4602      	mov	r2, r0
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fa2:	460a      	mov	r2, r1
 8000fa4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000fa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000fae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000fb2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000fb6:	7812      	ldrb	r2, [r2, #0]
 8000fb8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000fc0:	e015      	b.n	8000fee <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000fc2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000fc6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000fca:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	441a      	add	r2, r3
 8000fd2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	7811      	ldrb	r1, [r2, #0]
 8000fda:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000fde:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000fe2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000fe4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000fe8:	3301      	adds	r3, #1
 8000fea:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000fee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000ff8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000ffc:	8812      	ldrh	r2, [r2, #0]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d8df      	bhi.n	8000fc2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8001002:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001006:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b299      	uxth	r1, r3
 800100e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001012:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	b29b      	uxth	r3, r3
 800101c:	f107 020c 	add.w	r2, r7, #12
 8001020:	200a      	movs	r0, #10
 8001022:	9000      	str	r0, [sp, #0]
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <ssd1306_I2C_WriteMulti+0xc8>)
 8001026:	f000 fdb5 	bl	8001b94 <HAL_I2C_Master_Transmit>
}
 800102a:	bf00      	nop
 800102c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001030:	46bd      	mov	sp, r7
 8001032:	bd90      	pop	{r4, r7, pc}
 8001034:	20000088 	.word	0x20000088

08001038 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af02      	add	r7, sp, #8
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	460b      	mov	r3, r1
 8001044:	71bb      	strb	r3, [r7, #6]
 8001046:	4613      	mov	r3, r2
 8001048:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800104e:	797b      	ldrb	r3, [r7, #5]
 8001050:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	b299      	uxth	r1, r3
 8001056:	f107 020c 	add.w	r2, r7, #12
 800105a:	230a      	movs	r3, #10
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2302      	movs	r3, #2
 8001060:	4803      	ldr	r0, [pc, #12]	@ (8001070 <ssd1306_I2C_Write+0x38>)
 8001062:	f000 fd97 	bl	8001b94 <HAL_I2C_Master_Transmit>
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000088 	.word	0x20000088

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_MspInit+0x5c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <HAL_MspInit+0x5c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_MspInit+0x5c>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <HAL_MspInit+0x5c>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <HAL_MspInit+0x5c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <HAL_MspInit+0x5c>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_MspInit+0x60>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_MspInit+0x60>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <NMI_Handler+0x4>

080010e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <HardFault_Handler+0x4>

080010e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <MemManage_Handler+0x4>

080010f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <UsageFault_Handler+0x4>

08001100 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001128:	f000 f918 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001138:	4a14      	ldr	r2, [pc, #80]	@ (800118c <_sbrk+0x5c>)
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <_sbrk+0x60>)
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001144:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <_sbrk+0x64>)
 800114e:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <_sbrk+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	429a      	cmp	r2, r3
 800115e:	d207      	bcs.n	8001170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001160:	f001 ff0e 	bl	8002f80 <__errno>
 8001164:	4603      	mov	r3, r0
 8001166:	220c      	movs	r2, #12
 8001168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	e009      	b.n	8001184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001176:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <_sbrk+0x64>)
 8001180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20005000 	.word	0x20005000
 8001190:	00000400 	.word	0x00000400
 8001194:	20000504 	.word	0x20000504
 8001198:	200006a0 	.word	0x200006a0

0800119c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001244 <MX_TIM1_Init+0x9c>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011cc:	2247      	movs	r2, #71	@ 0x47
 80011ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e4:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011f0:	4813      	ldr	r0, [pc, #76]	@ (8001240 <MX_TIM1_Init+0x98>)
 80011f2:	f001 fc23 	bl	8002a3c <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011fc:	f7ff fd6a 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001204:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4619      	mov	r1, r3
 800120c:	480c      	ldr	r0, [pc, #48]	@ (8001240 <MX_TIM1_Init+0x98>)
 800120e:	f001 fc64 	bl	8002ada <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001218:	f7ff fd5c 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001224:	463b      	mov	r3, r7
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	@ (8001240 <MX_TIM1_Init+0x98>)
 800122a:	f001 fe21 	bl	8002e70 <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001234:	f7ff fd4e 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000508 	.word	0x20000508
 8001244:	40012c00 	.word	0x40012c00

08001248 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a09      	ldr	r2, [pc, #36]	@ (800127c <HAL_TIM_Base_MspInit+0x34>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d10b      	bne.n	8001272 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <HAL_TIM_Base_MspInit+0x38>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	4a08      	ldr	r2, [pc, #32]	@ (8001280 <HAL_TIM_Base_MspInit+0x38>)
 8001260:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001264:	6193      	str	r3, [r2, #24]
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_TIM_Base_MspInit+0x38>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	40012c00 	.word	0x40012c00
 8001280:	40021000 	.word	0x40021000

08001284 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001284:	f7ff ff8a 	bl	800119c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480b      	ldr	r0, [pc, #44]	@ (80012b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800128a:	490c      	ldr	r1, [pc, #48]	@ (80012bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800128c:	4a0c      	ldr	r2, [pc, #48]	@ (80012c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a09      	ldr	r2, [pc, #36]	@ (80012c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012a0:	4c09      	ldr	r4, [pc, #36]	@ (80012c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ae:	f001 fe6d 	bl	8002f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b2:	f7ff fc21 	bl	8000af8 <main>
  bx lr
 80012b6:	4770      	bx	lr
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012c0:	080059c8 	.word	0x080059c8
  ldr r2, =_sbss
 80012c4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012c8:	2000069c 	.word	0x2000069c

080012cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC1_2_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <HAL_Init+0x28>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a07      	ldr	r2, [pc, #28]	@ (80012f8 <HAL_Init+0x28>)
 80012da:	f043 0310 	orr.w	r3, r3, #16
 80012de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f000 f92b 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e6:	200f      	movs	r0, #15
 80012e8:	f000 f808 	bl	80012fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ec:	f7ff fec2 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40022000 	.word	0x40022000

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <HAL_InitTick+0x54>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <HAL_InitTick+0x58>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f935 	bl	800158a <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f90b 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	@ (8001358 <HAL_InitTick+0x5c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000010 	.word	0x20000010
 8001354:	20000018 	.word	0x20000018
 8001358:	20000014 	.word	0x20000014

0800135c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_IncTick+0x1c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	@ (800137c <HAL_IncTick+0x20>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a03      	ldr	r2, [pc, #12]	@ (800137c <HAL_IncTick+0x20>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	20000018 	.word	0x20000018
 800137c:	20000550 	.word	0x20000550

08001380 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b02      	ldr	r3, [pc, #8]	@ (8001390 <HAL_GetTick+0x10>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000550 	.word	0x20000550

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff fff0 	bl	8001380 <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffe0 	bl	8001380 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000018 	.word	0x20000018

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	@ (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	@ (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	@ (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	@ 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	@ 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff90 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff49 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff5e 	bl	8001424 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff90 	bl	8001494 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5f 	bl	8001440 <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffb0 	bl	80014f8 <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b08b      	sub	sp, #44	@ 0x2c
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b6:	e169      	b.n	800188c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015b8:	2201      	movs	r2, #1
 80015ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	f040 8158 	bne.w	8001886 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4a9a      	ldr	r2, [pc, #616]	@ (8001844 <HAL_GPIO_Init+0x2a0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d05e      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 80015e0:	4a98      	ldr	r2, [pc, #608]	@ (8001844 <HAL_GPIO_Init+0x2a0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d875      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 80015e6:	4a98      	ldr	r2, [pc, #608]	@ (8001848 <HAL_GPIO_Init+0x2a4>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d058      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 80015ec:	4a96      	ldr	r2, [pc, #600]	@ (8001848 <HAL_GPIO_Init+0x2a4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d86f      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 80015f2:	4a96      	ldr	r2, [pc, #600]	@ (800184c <HAL_GPIO_Init+0x2a8>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d052      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 80015f8:	4a94      	ldr	r2, [pc, #592]	@ (800184c <HAL_GPIO_Init+0x2a8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d869      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 80015fe:	4a94      	ldr	r2, [pc, #592]	@ (8001850 <HAL_GPIO_Init+0x2ac>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d04c      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 8001604:	4a92      	ldr	r2, [pc, #584]	@ (8001850 <HAL_GPIO_Init+0x2ac>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d863      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 800160a:	4a92      	ldr	r2, [pc, #584]	@ (8001854 <HAL_GPIO_Init+0x2b0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d046      	beq.n	800169e <HAL_GPIO_Init+0xfa>
 8001610:	4a90      	ldr	r2, [pc, #576]	@ (8001854 <HAL_GPIO_Init+0x2b0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d85d      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 8001616:	2b12      	cmp	r3, #18
 8001618:	d82a      	bhi.n	8001670 <HAL_GPIO_Init+0xcc>
 800161a:	2b12      	cmp	r3, #18
 800161c:	d859      	bhi.n	80016d2 <HAL_GPIO_Init+0x12e>
 800161e:	a201      	add	r2, pc, #4	@ (adr r2, 8001624 <HAL_GPIO_Init+0x80>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	0800169f 	.word	0x0800169f
 8001628:	08001679 	.word	0x08001679
 800162c:	0800168b 	.word	0x0800168b
 8001630:	080016cd 	.word	0x080016cd
 8001634:	080016d3 	.word	0x080016d3
 8001638:	080016d3 	.word	0x080016d3
 800163c:	080016d3 	.word	0x080016d3
 8001640:	080016d3 	.word	0x080016d3
 8001644:	080016d3 	.word	0x080016d3
 8001648:	080016d3 	.word	0x080016d3
 800164c:	080016d3 	.word	0x080016d3
 8001650:	080016d3 	.word	0x080016d3
 8001654:	080016d3 	.word	0x080016d3
 8001658:	080016d3 	.word	0x080016d3
 800165c:	080016d3 	.word	0x080016d3
 8001660:	080016d3 	.word	0x080016d3
 8001664:	080016d3 	.word	0x080016d3
 8001668:	08001681 	.word	0x08001681
 800166c:	08001695 	.word	0x08001695
 8001670:	4a79      	ldr	r2, [pc, #484]	@ (8001858 <HAL_GPIO_Init+0x2b4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001676:	e02c      	b.n	80016d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	623b      	str	r3, [r7, #32]
          break;
 800167e:	e029      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	3304      	adds	r3, #4
 8001686:	623b      	str	r3, [r7, #32]
          break;
 8001688:	e024      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	3308      	adds	r3, #8
 8001690:	623b      	str	r3, [r7, #32]
          break;
 8001692:	e01f      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	330c      	adds	r3, #12
 800169a:	623b      	str	r3, [r7, #32]
          break;
 800169c:	e01a      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016a6:	2304      	movs	r3, #4
 80016a8:	623b      	str	r3, [r7, #32]
          break;
 80016aa:	e013      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b4:	2308      	movs	r3, #8
 80016b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	611a      	str	r2, [r3, #16]
          break;
 80016be:	e009      	b.n	80016d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c0:	2308      	movs	r3, #8
 80016c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	615a      	str	r2, [r3, #20]
          break;
 80016ca:	e003      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
          break;
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x130>
          break;
 80016d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2bff      	cmp	r3, #255	@ 0xff
 80016d8:	d801      	bhi.n	80016de <HAL_GPIO_Init+0x13a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	e001      	b.n	80016e2 <HAL_GPIO_Init+0x13e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3304      	adds	r3, #4
 80016e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2bff      	cmp	r3, #255	@ 0xff
 80016e8:	d802      	bhi.n	80016f0 <HAL_GPIO_Init+0x14c>
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0x152>
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	3b08      	subs	r3, #8
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	210f      	movs	r1, #15
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	401a      	ands	r2, r3
 8001708:	6a39      	ldr	r1, [r7, #32]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	fa01 f303 	lsl.w	r3, r1, r3
 8001710:	431a      	orrs	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80b1 	beq.w	8001886 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001724:	4b4d      	ldr	r3, [pc, #308]	@ (800185c <HAL_GPIO_Init+0x2b8>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4a4c      	ldr	r2, [pc, #304]	@ (800185c <HAL_GPIO_Init+0x2b8>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6193      	str	r3, [r2, #24]
 8001730:	4b4a      	ldr	r3, [pc, #296]	@ (800185c <HAL_GPIO_Init+0x2b8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800173c:	4a48      	ldr	r2, [pc, #288]	@ (8001860 <HAL_GPIO_Init+0x2bc>)
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3302      	adds	r3, #2
 8001744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001748:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	220f      	movs	r2, #15
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a40      	ldr	r2, [pc, #256]	@ (8001864 <HAL_GPIO_Init+0x2c0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d013      	beq.n	8001790 <HAL_GPIO_Init+0x1ec>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a3f      	ldr	r2, [pc, #252]	@ (8001868 <HAL_GPIO_Init+0x2c4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00d      	beq.n	800178c <HAL_GPIO_Init+0x1e8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a3e      	ldr	r2, [pc, #248]	@ (800186c <HAL_GPIO_Init+0x2c8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d007      	beq.n	8001788 <HAL_GPIO_Init+0x1e4>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a3d      	ldr	r2, [pc, #244]	@ (8001870 <HAL_GPIO_Init+0x2cc>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d101      	bne.n	8001784 <HAL_GPIO_Init+0x1e0>
 8001780:	2303      	movs	r3, #3
 8001782:	e006      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001784:	2304      	movs	r3, #4
 8001786:	e004      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001788:	2302      	movs	r3, #2
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <HAL_GPIO_Init+0x1ee>
 8001790:	2300      	movs	r3, #0
 8001792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001794:	f002 0203 	and.w	r2, r2, #3
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	4093      	lsls	r3, r2
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4313      	orrs	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017a2:	492f      	ldr	r1, [pc, #188]	@ (8001860 <HAL_GPIO_Init+0x2bc>)
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d006      	beq.n	80017ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	492c      	ldr	r1, [pc, #176]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4928      	ldr	r1, [pc, #160]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017e4:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	4922      	ldr	r1, [pc, #136]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60cb      	str	r3, [r1, #12]
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	491e      	ldr	r1, [pc, #120]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4918      	ldr	r1, [pc, #96]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	43db      	mvns	r3, r3
 8001822:	4914      	ldr	r1, [pc, #80]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 8001824:	4013      	ands	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d021      	beq.n	8001878 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	490e      	ldr	r1, [pc, #56]	@ (8001874 <HAL_GPIO_Init+0x2d0>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]
 8001840:	e021      	b.n	8001886 <HAL_GPIO_Init+0x2e2>
 8001842:	bf00      	nop
 8001844:	10320000 	.word	0x10320000
 8001848:	10310000 	.word	0x10310000
 800184c:	10220000 	.word	0x10220000
 8001850:	10210000 	.word	0x10210000
 8001854:	10120000 	.word	0x10120000
 8001858:	10110000 	.word	0x10110000
 800185c:	40021000 	.word	0x40021000
 8001860:	40010000 	.word	0x40010000
 8001864:	40010800 	.word	0x40010800
 8001868:	40010c00 	.word	0x40010c00
 800186c:	40011000 	.word	0x40011000
 8001870:	40011400 	.word	0x40011400
 8001874:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_GPIO_Init+0x304>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	43db      	mvns	r3, r3
 8001880:	4909      	ldr	r1, [pc, #36]	@ (80018a8 <HAL_GPIO_Init+0x304>)
 8001882:	4013      	ands	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	f47f ae8e 	bne.w	80015b8 <HAL_GPIO_Init+0x14>
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	372c      	adds	r7, #44	@ 0x2c
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	40010400 	.word	0x40010400

080018ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	887b      	ldrh	r3, [r7, #2]
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e001      	b.n	80018ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	807b      	strh	r3, [r7, #2]
 80018e6:	4613      	mov	r3, r2
 80018e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018ea:	787b      	ldrb	r3, [r7, #1]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018f0:	887a      	ldrh	r2, [r7, #2]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018f6:	e003      	b.n	8001900 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018f8:	887b      	ldrh	r3, [r7, #2]
 80018fa:	041a      	lsls	r2, r3, #16
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	611a      	str	r2, [r3, #16]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
	...

0800190c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e12b      	b.n	8001b76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff f8a0 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2224      	movs	r2, #36	@ 0x24
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800195e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800196e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001970:	f001 f832 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8001974:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4a81      	ldr	r2, [pc, #516]	@ (8001b80 <HAL_I2C_Init+0x274>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d807      	bhi.n	8001990 <HAL_I2C_Init+0x84>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4a80      	ldr	r2, [pc, #512]	@ (8001b84 <HAL_I2C_Init+0x278>)
 8001984:	4293      	cmp	r3, r2
 8001986:	bf94      	ite	ls
 8001988:	2301      	movls	r3, #1
 800198a:	2300      	movhi	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	e006      	b.n	800199e <HAL_I2C_Init+0x92>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4a7d      	ldr	r2, [pc, #500]	@ (8001b88 <HAL_I2C_Init+0x27c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	bf94      	ite	ls
 8001998:	2301      	movls	r3, #1
 800199a:	2300      	movhi	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0e7      	b.n	8001b76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4a78      	ldr	r2, [pc, #480]	@ (8001b8c <HAL_I2C_Init+0x280>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0c9b      	lsrs	r3, r3, #18
 80019b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001b80 <HAL_I2C_Init+0x274>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d802      	bhi.n	80019e0 <HAL_I2C_Init+0xd4>
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	3301      	adds	r3, #1
 80019de:	e009      	b.n	80019f4 <HAL_I2C_Init+0xe8>
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	4a69      	ldr	r2, [pc, #420]	@ (8001b90 <HAL_I2C_Init+0x284>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	099b      	lsrs	r3, r3, #6
 80019f2:	3301      	adds	r3, #1
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	430b      	orrs	r3, r1
 80019fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	495c      	ldr	r1, [pc, #368]	@ (8001b80 <HAL_I2C_Init+0x274>)
 8001a10:	428b      	cmp	r3, r1
 8001a12:	d819      	bhi.n	8001a48 <HAL_I2C_Init+0x13c>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1e59      	subs	r1, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a22:	1c59      	adds	r1, r3, #1
 8001a24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a28:	400b      	ands	r3, r1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00a      	beq.n	8001a44 <HAL_I2C_Init+0x138>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1e59      	subs	r1, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a42:	e051      	b.n	8001ae8 <HAL_I2C_Init+0x1dc>
 8001a44:	2304      	movs	r3, #4
 8001a46:	e04f      	b.n	8001ae8 <HAL_I2C_Init+0x1dc>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d111      	bne.n	8001a74 <HAL_I2C_Init+0x168>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1e58      	subs	r0, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6859      	ldr	r1, [r3, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	440b      	add	r3, r1
 8001a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a62:	3301      	adds	r3, #1
 8001a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf0c      	ite	eq
 8001a6c:	2301      	moveq	r3, #1
 8001a6e:	2300      	movne	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	e012      	b.n	8001a9a <HAL_I2C_Init+0x18e>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1e58      	subs	r0, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	0099      	lsls	r1, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_I2C_Init+0x196>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e022      	b.n	8001ae8 <HAL_I2C_Init+0x1dc>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10e      	bne.n	8001ac8 <HAL_I2C_Init+0x1bc>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1e58      	subs	r0, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6859      	ldr	r1, [r3, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	440b      	add	r3, r1
 8001ab8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ac6:	e00f      	b.n	8001ae8 <HAL_I2C_Init+0x1dc>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1e58      	subs	r0, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	0099      	lsls	r1, r3, #2
 8001ad8:	440b      	add	r3, r1
 8001ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	6809      	ldr	r1, [r1, #0]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6911      	ldr	r1, [r2, #16]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68d2      	ldr	r2, [r2, #12]
 8001b22:	4311      	orrs	r1, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695a      	ldr	r2, [r3, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2220      	movs	r2, #32
 8001b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	000186a0 	.word	0x000186a0
 8001b84:	001e847f 	.word	0x001e847f
 8001b88:	003d08ff 	.word	0x003d08ff
 8001b8c:	431bde83 	.word	0x431bde83
 8001b90:	10624dd3 	.word	0x10624dd3

08001b94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af02      	add	r7, sp, #8
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	817b      	strh	r3, [r7, #10]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff fbea 	bl	8001380 <HAL_GetTick>
 8001bac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	f040 80e0 	bne.w	8001d7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2319      	movs	r3, #25
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4970      	ldr	r1, [pc, #448]	@ (8001d88 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f964 	bl	8001e94 <I2C_WaitOnFlagUntilTimeout>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e0d3      	b.n	8001d7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_I2C_Master_Transmit+0x50>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e0cc      	b.n	8001d7e <HAL_I2C_Master_Transmit+0x1ea>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d007      	beq.n	8001c0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 0201 	orr.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2221      	movs	r2, #33	@ 0x21
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2210      	movs	r2, #16
 8001c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	893a      	ldrh	r2, [r7, #8]
 8001c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4a50      	ldr	r2, [pc, #320]	@ (8001d8c <HAL_I2C_Master_Transmit+0x1f8>)
 8001c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c4c:	8979      	ldrh	r1, [r7, #10]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	6a3a      	ldr	r2, [r7, #32]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f89c 	bl	8001d90 <I2C_MasterRequestWrite>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e08d      	b.n	8001d7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c78:	e066      	b.n	8001d48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	6a39      	ldr	r1, [r7, #32]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fa22 	bl	80020c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00d      	beq.n	8001ca6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d107      	bne.n	8001ca2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ca0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e06b      	b.n	8001d7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d11b      	bne.n	8001d1c <HAL_I2C_Master_Transmit+0x188>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d017      	beq.n	8001d1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf0:	781a      	ldrb	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	6a39      	ldr	r1, [r7, #32]
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 fa19 	bl	8002158 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00d      	beq.n	8001d48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d107      	bne.n	8001d44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e01a      	b.n	8001d7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d194      	bne.n	8001c7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e000      	b.n	8001d7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d7c:	2302      	movs	r3, #2
  }
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	00100002 	.word	0x00100002
 8001d8c:	ffff0000 	.word	0xffff0000

08001d90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d006      	beq.n	8001dba <I2C_MasterRequestWrite+0x2a>
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d003      	beq.n	8001dba <I2C_MasterRequestWrite+0x2a>
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001db8:	d108      	bne.n	8001dcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e00b      	b.n	8001de4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd0:	2b12      	cmp	r3, #18
 8001dd2:	d107      	bne.n	8001de4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001de2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 f84f 	bl	8001e94 <I2C_WaitOnFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00d      	beq.n	8001e18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e0a:	d103      	bne.n	8001e14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e035      	b.n	8001e84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e20:	d108      	bne.n	8001e34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e22:	897b      	ldrh	r3, [r7, #10]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	e01b      	b.n	8001e6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e34:	897b      	ldrh	r3, [r7, #10]
 8001e36:	11db      	asrs	r3, r3, #7
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f003 0306 	and.w	r3, r3, #6
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f063 030f 	orn	r3, r3, #15
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	490e      	ldr	r1, [pc, #56]	@ (8001e8c <I2C_MasterRequestWrite+0xfc>)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f898 	bl	8001f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e010      	b.n	8001e84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e62:	897b      	ldrh	r3, [r7, #10]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4907      	ldr	r1, [pc, #28]	@ (8001e90 <I2C_MasterRequestWrite+0x100>)
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f888 	bl	8001f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	00010008 	.word	0x00010008
 8001e90:	00010002 	.word	0x00010002

08001e94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ea4:	e048      	b.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d044      	beq.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eae:	f7ff fa67 	bl	8001380 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d302      	bcc.n	8001ec4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d139      	bne.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	0c1b      	lsrs	r3, r3, #16
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10d      	bne.n	8001eea <I2C_WaitOnFlagUntilTimeout+0x56>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	43da      	mvns	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	e00c      	b.n	8001f04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d116      	bne.n	8001f38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	f043 0220 	orr.w	r2, r3, #32
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e023      	b.n	8001f80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d10d      	bne.n	8001f5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf0c      	ite	eq
 8001f54:	2301      	moveq	r3, #1
 8001f56:	2300      	movne	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	e00c      	b.n	8001f78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	43da      	mvns	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf0c      	ite	eq
 8001f70:	2301      	moveq	r3, #1
 8001f72:	2300      	movne	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d093      	beq.n	8001ea6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f96:	e071      	b.n	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa6:	d123      	bne.n	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	f043 0204 	orr.w	r2, r3, #4
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e067      	b.n	80020c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff6:	d041      	beq.n	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff8:	f7ff f9c2 	bl	8001380 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	d302      	bcc.n	800200e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d136      	bne.n	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	0c1b      	lsrs	r3, r3, #16
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d10c      	bne.n	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4013      	ands	r3, r2
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	bf14      	ite	ne
 800202a:	2301      	movne	r3, #1
 800202c:	2300      	moveq	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	e00b      	b.n	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	43da      	mvns	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	4013      	ands	r3, r2
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d016      	beq.n	800207c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	f043 0220 	orr.w	r2, r3, #32
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e021      	b.n	80020c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	0c1b      	lsrs	r3, r3, #16
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d10c      	bne.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	43da      	mvns	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4013      	ands	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	e00b      	b.n	80020b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	43da      	mvns	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	4013      	ands	r3, r2
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	bf14      	ite	ne
 80020b2:	2301      	movne	r3, #1
 80020b4:	2300      	moveq	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f47f af6d 	bne.w	8001f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020d4:	e034      	b.n	8002140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f886 	bl	80021e8 <I2C_IsAcknowledgeFailed>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e034      	b.n	8002150 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d028      	beq.n	8002140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ee:	f7ff f947 	bl	8001380 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d302      	bcc.n	8002104 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d11d      	bne.n	8002140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210e:	2b80      	cmp	r3, #128	@ 0x80
 8002110:	d016      	beq.n	8002140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e007      	b.n	8002150 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800214a:	2b80      	cmp	r3, #128	@ 0x80
 800214c:	d1c3      	bne.n	80020d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002164:	e034      	b.n	80021d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f83e 	bl	80021e8 <I2C_IsAcknowledgeFailed>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e034      	b.n	80021e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d028      	beq.n	80021d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217e:	f7ff f8ff 	bl	8001380 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	d302      	bcc.n	8002194 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d11d      	bne.n	80021d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d016      	beq.n	80021d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	f043 0220 	orr.w	r2, r3, #32
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e007      	b.n	80021e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d1c3      	bne.n	8002166 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021fe:	d11b      	bne.n	8002238 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002208:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e272      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8087 	beq.w	8002372 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002264:	4b92      	ldr	r3, [pc, #584]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b04      	cmp	r3, #4
 800226e:	d00c      	beq.n	800228a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002270:	4b8f      	ldr	r3, [pc, #572]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b08      	cmp	r3, #8
 800227a:	d112      	bne.n	80022a2 <HAL_RCC_OscConfig+0x5e>
 800227c:	4b8c      	ldr	r3, [pc, #560]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002288:	d10b      	bne.n	80022a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228a:	4b89      	ldr	r3, [pc, #548]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d06c      	beq.n	8002370 <HAL_RCC_OscConfig+0x12c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d168      	bne.n	8002370 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e24c      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x76>
 80022ac:	4b80      	ldr	r3, [pc, #512]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a7f      	ldr	r2, [pc, #508]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e02e      	b.n	8002318 <HAL_RCC_OscConfig+0xd4>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x98>
 80022c2:	4b7b      	ldr	r3, [pc, #492]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7a      	ldr	r2, [pc, #488]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b78      	ldr	r3, [pc, #480]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a77      	ldr	r2, [pc, #476]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0xd4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0xbc>
 80022e6:	4b72      	ldr	r3, [pc, #456]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a71      	ldr	r2, [pc, #452]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b6f      	ldr	r3, [pc, #444]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6e      	ldr	r2, [pc, #440]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0xd4>
 8002300:	4b6b      	ldr	r3, [pc, #428]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a6a      	ldr	r2, [pc, #424]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b68      	ldr	r3, [pc, #416]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a67      	ldr	r2, [pc, #412]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002316:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff f82e 	bl	8001380 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff f82a 	bl	8001380 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	@ 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e200      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b5d      	ldr	r3, [pc, #372]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0xe4>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff f81a 	bl	8001380 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff f816 	bl	8001380 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1ec      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	4b53      	ldr	r3, [pc, #332]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x10c>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d063      	beq.n	8002446 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800237e:	4b4c      	ldr	r3, [pc, #304]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800238a:	4b49      	ldr	r3, [pc, #292]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b08      	cmp	r3, #8
 8002394:	d11c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x18c>
 8002396:	4b46      	ldr	r3, [pc, #280]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d116      	bne.n	80023d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	4b43      	ldr	r3, [pc, #268]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x176>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e1c0      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	4b3d      	ldr	r3, [pc, #244]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4939      	ldr	r1, [pc, #228]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	e03a      	b.n	8002446 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d8:	4b36      	ldr	r3, [pc, #216]	@ (80024b4 <HAL_RCC_OscConfig+0x270>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7fe ffcf 	bl	8001380 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e6:	f7fe ffcb 	bl	8001380 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e1a1      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4b2a      	ldr	r3, [pc, #168]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4927      	ldr	r1, [pc, #156]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
 8002418:	e015      	b.n	8002446 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241a:	4b26      	ldr	r3, [pc, #152]	@ (80024b4 <HAL_RCC_OscConfig+0x270>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe ffae 	bl	8001380 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002428:	f7fe ffaa 	bl	8001380 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e180      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	4b1d      	ldr	r3, [pc, #116]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d03a      	beq.n	80024c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d019      	beq.n	800248e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245a:	4b17      	ldr	r3, [pc, #92]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7fe ff8e 	bl	8001380 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7fe ff8a 	bl	8001380 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e160      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <HAL_RCC_OscConfig+0x26c>)
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002486:	2001      	movs	r0, #1
 8002488:	f000 faba 	bl	8002a00 <RCC_Delay>
 800248c:	e01c      	b.n	80024c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248e:	4b0a      	ldr	r3, [pc, #40]	@ (80024b8 <HAL_RCC_OscConfig+0x274>)
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002494:	f7fe ff74 	bl	8001380 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249a:	e00f      	b.n	80024bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe ff70 	bl	8001380 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d908      	bls.n	80024bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e146      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000
 80024b4:	42420000 	.word	0x42420000
 80024b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	4b92      	ldr	r3, [pc, #584]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e9      	bne.n	800249c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a6 	beq.w	8002622 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024da:	4b8b      	ldr	r3, [pc, #556]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10d      	bne.n	8002502 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	4b88      	ldr	r3, [pc, #544]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a87      	ldr	r2, [pc, #540]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f0:	61d3      	str	r3, [r2, #28]
 80024f2:	4b85      	ldr	r3, [pc, #532]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fe:	2301      	movs	r3, #1
 8002500:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	4b82      	ldr	r3, [pc, #520]	@ (800270c <HAL_RCC_OscConfig+0x4c8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d118      	bne.n	8002540 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250e:	4b7f      	ldr	r3, [pc, #508]	@ (800270c <HAL_RCC_OscConfig+0x4c8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a7e      	ldr	r2, [pc, #504]	@ (800270c <HAL_RCC_OscConfig+0x4c8>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251a:	f7fe ff31 	bl	8001380 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002522:	f7fe ff2d 	bl	8001380 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b64      	cmp	r3, #100	@ 0x64
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e103      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002534:	4b75      	ldr	r3, [pc, #468]	@ (800270c <HAL_RCC_OscConfig+0x4c8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x312>
 8002548:	4b6f      	ldr	r3, [pc, #444]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a6e      	ldr	r2, [pc, #440]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	e02d      	b.n	80025b2 <HAL_RCC_OscConfig+0x36e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0x334>
 800255e:	4b6a      	ldr	r3, [pc, #424]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4a69      	ldr	r2, [pc, #420]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	6213      	str	r3, [r2, #32]
 800256a:	4b67      	ldr	r3, [pc, #412]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a66      	ldr	r2, [pc, #408]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	e01c      	b.n	80025b2 <HAL_RCC_OscConfig+0x36e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d10c      	bne.n	800259a <HAL_RCC_OscConfig+0x356>
 8002580:	4b61      	ldr	r3, [pc, #388]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4a60      	ldr	r2, [pc, #384]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	6213      	str	r3, [r2, #32]
 800258c:	4b5e      	ldr	r3, [pc, #376]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4a5d      	ldr	r2, [pc, #372]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6213      	str	r3, [r2, #32]
 8002598:	e00b      	b.n	80025b2 <HAL_RCC_OscConfig+0x36e>
 800259a:	4b5b      	ldr	r3, [pc, #364]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a5a      	ldr	r2, [pc, #360]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	4b58      	ldr	r3, [pc, #352]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a57      	ldr	r2, [pc, #348]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d015      	beq.n	80025e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ba:	f7fe fee1 	bl	8001380 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe fedd 	bl	8001380 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0b1      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ee      	beq.n	80025c2 <HAL_RCC_OscConfig+0x37e>
 80025e4:	e014      	b.n	8002610 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fecb 	bl	8001380 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe fec7 	bl	8001380 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e09b      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002604:	4b40      	ldr	r3, [pc, #256]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1ee      	bne.n	80025ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002610:	7dfb      	ldrb	r3, [r7, #23]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d105      	bne.n	8002622 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002616:	4b3c      	ldr	r3, [pc, #240]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4a3b      	ldr	r2, [pc, #236]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002620:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8087 	beq.w	800273a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262c:	4b36      	ldr	r3, [pc, #216]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b08      	cmp	r3, #8
 8002636:	d061      	beq.n	80026fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	2b02      	cmp	r3, #2
 800263e:	d146      	bne.n	80026ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002640:	4b33      	ldr	r3, [pc, #204]	@ (8002710 <HAL_RCC_OscConfig+0x4cc>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe fe9b 	bl	8001380 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe fe97 	bl	8001380 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e06d      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002660:	4b29      	ldr	r3, [pc, #164]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002674:	d108      	bne.n	8002688 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002676:	4b24      	ldr	r3, [pc, #144]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4921      	ldr	r1, [pc, #132]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002688:	4b1f      	ldr	r3, [pc, #124]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a19      	ldr	r1, [r3, #32]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002698:	430b      	orrs	r3, r1
 800269a:	491b      	ldr	r1, [pc, #108]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <HAL_RCC_OscConfig+0x4cc>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7fe fe6b 	bl	8001380 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ae:	f7fe fe67 	bl	8001380 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e03d      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x46a>
 80026cc:	e035      	b.n	800273a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <HAL_RCC_OscConfig+0x4cc>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe fe54 	bl	8001380 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7fe fe50 	bl	8001380 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e026      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ee:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x498>
 80026fa:	e01e      	b.n	800273a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d107      	bne.n	8002714 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e019      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
 8002708:	40021000 	.word	0x40021000
 800270c:	40007000 	.word	0x40007000
 8002710:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_RCC_OscConfig+0x500>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	429a      	cmp	r2, r3
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d001      	beq.n	800273a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000

08002748 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0d0      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b6a      	ldr	r3, [pc, #424]	@ (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d910      	bls.n	800278c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b67      	ldr	r3, [pc, #412]	@ (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 0207 	bic.w	r2, r3, #7
 8002772:	4965      	ldr	r1, [pc, #404]	@ (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b63      	ldr	r3, [pc, #396]	@ (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0b8      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a4:	4b59      	ldr	r3, [pc, #356]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4a58      	ldr	r2, [pc, #352]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027bc:	4b53      	ldr	r3, [pc, #332]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a52      	ldr	r2, [pc, #328]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	4b50      	ldr	r3, [pc, #320]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	494d      	ldr	r1, [pc, #308]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d040      	beq.n	8002868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b47      	ldr	r3, [pc, #284]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d115      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07f      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d107      	bne.n	8002816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002806:	4b41      	ldr	r3, [pc, #260]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e073      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002816:	4b3d      	ldr	r3, [pc, #244]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e06b      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002826:	4b39      	ldr	r3, [pc, #228]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	4936      	ldr	r1, [pc, #216]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002838:	f7fe fda2 	bl	8001380 <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7fe fd9e 	bl	8001380 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e053      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002856:	4b2d      	ldr	r3, [pc, #180]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 020c 	and.w	r2, r3, #12
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	429a      	cmp	r2, r3
 8002866:	d1eb      	bne.n	8002840 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002868:	4b27      	ldr	r3, [pc, #156]	@ (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d210      	bcs.n	8002898 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b24      	ldr	r3, [pc, #144]	@ (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 0207 	bic.w	r2, r3, #7
 800287e:	4922      	ldr	r1, [pc, #136]	@ (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e032      	b.n	80028fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a4:	4b19      	ldr	r3, [pc, #100]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4916      	ldr	r1, [pc, #88]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028c2:	4b12      	ldr	r3, [pc, #72]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	490e      	ldr	r1, [pc, #56]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028d6:	f000 f821 	bl	800291c <HAL_RCC_GetSysClockFreq>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	490a      	ldr	r1, [pc, #40]	@ (8002910 <HAL_RCC_ClockConfig+0x1c8>)
 80028e8:	5ccb      	ldrb	r3, [r1, r3]
 80028ea:	fa22 f303 	lsr.w	r3, r2, r3
 80028ee:	4a09      	ldr	r2, [pc, #36]	@ (8002914 <HAL_RCC_ClockConfig+0x1cc>)
 80028f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028f2:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <HAL_RCC_ClockConfig+0x1d0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fd00 	bl	80012fc <HAL_InitTick>

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40022000 	.word	0x40022000
 800290c:	40021000 	.word	0x40021000
 8002910:	08005960 	.word	0x08005960
 8002914:	20000010 	.word	0x20000010
 8002918:	20000014 	.word	0x20000014

0800291c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002936:	4b1e      	ldr	r3, [pc, #120]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b04      	cmp	r3, #4
 8002944:	d002      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x30>
 8002946:	2b08      	cmp	r3, #8
 8002948:	d003      	beq.n	8002952 <HAL_RCC_GetSysClockFreq+0x36>
 800294a:	e027      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800294c:	4b19      	ldr	r3, [pc, #100]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800294e:	613b      	str	r3, [r7, #16]
      break;
 8002950:	e027      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	0c9b      	lsrs	r3, r3, #18
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	4a17      	ldr	r2, [pc, #92]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800295c:	5cd3      	ldrb	r3, [r2, r3]
 800295e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d010      	beq.n	800298c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800296a:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	0c5b      	lsrs	r3, r3, #17
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	4a11      	ldr	r2, [pc, #68]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002976:	5cd3      	ldrb	r3, [r2, r3]
 8002978:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800297e:	fb03 f202 	mul.w	r2, r3, r2
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e004      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a0c      	ldr	r2, [pc, #48]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002990:	fb02 f303 	mul.w	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	613b      	str	r3, [r7, #16]
      break;
 800299a:	e002      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800299e:	613b      	str	r3, [r7, #16]
      break;
 80029a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a2:	693b      	ldr	r3, [r7, #16]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	007a1200 	.word	0x007a1200
 80029b8:	08005978 	.word	0x08005978
 80029bc:	08005988 	.word	0x08005988
 80029c0:	003d0900 	.word	0x003d0900

080029c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c8:	4b02      	ldr	r3, [pc, #8]	@ (80029d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	20000010 	.word	0x20000010

080029d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029dc:	f7ff fff2 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	4903      	ldr	r1, [pc, #12]	@ (80029fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	08005970 	.word	0x08005970

08002a00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a08:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <RCC_Delay+0x34>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a38 <RCC_Delay+0x38>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0a5b      	lsrs	r3, r3, #9
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a1c:	bf00      	nop
  }
  while (Delay --);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1e5a      	subs	r2, r3, #1
 8002a22:	60fa      	str	r2, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f9      	bne.n	8002a1c <RCC_Delay+0x1c>
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	20000010 	.word	0x20000010
 8002a38:	10624dd3 	.word	0x10624dd3

08002a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e041      	b.n	8002ad2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fbf0 	bl	8001248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	f000 f8f4 	bl	8002c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_ConfigClockSource+0x1c>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e0b4      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x186>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b1c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b2e:	d03e      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0xd4>
 8002b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b34:	f200 8087 	bhi.w	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b3c:	f000 8086 	beq.w	8002c4c <HAL_TIM_ConfigClockSource+0x172>
 8002b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b44:	d87f      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b46:	2b70      	cmp	r3, #112	@ 0x70
 8002b48:	d01a      	beq.n	8002b80 <HAL_TIM_ConfigClockSource+0xa6>
 8002b4a:	2b70      	cmp	r3, #112	@ 0x70
 8002b4c:	d87b      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b4e:	2b60      	cmp	r3, #96	@ 0x60
 8002b50:	d050      	beq.n	8002bf4 <HAL_TIM_ConfigClockSource+0x11a>
 8002b52:	2b60      	cmp	r3, #96	@ 0x60
 8002b54:	d877      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b56:	2b50      	cmp	r3, #80	@ 0x50
 8002b58:	d03c      	beq.n	8002bd4 <HAL_TIM_ConfigClockSource+0xfa>
 8002b5a:	2b50      	cmp	r3, #80	@ 0x50
 8002b5c:	d873      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b5e:	2b40      	cmp	r3, #64	@ 0x40
 8002b60:	d058      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x13a>
 8002b62:	2b40      	cmp	r3, #64	@ 0x40
 8002b64:	d86f      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b66:	2b30      	cmp	r3, #48	@ 0x30
 8002b68:	d064      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0x15a>
 8002b6a:	2b30      	cmp	r3, #48	@ 0x30
 8002b6c:	d86b      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d060      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0x15a>
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d867      	bhi.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d05c      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0x15a>
 8002b7a:	2b10      	cmp	r3, #16
 8002b7c:	d05a      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0x15a>
 8002b7e:	e062      	b.n	8002c46 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b90:	f000 f94f 	bl	8002e32 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ba2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	609a      	str	r2, [r3, #8]
      break;
 8002bac:	e04f      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bbe:	f000 f938 	bl	8002e32 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bd0:	609a      	str	r2, [r3, #8]
      break;
 8002bd2:	e03c      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be0:	461a      	mov	r2, r3
 8002be2:	f000 f8af 	bl	8002d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2150      	movs	r1, #80	@ 0x50
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 f906 	bl	8002dfe <TIM_ITRx_SetConfig>
      break;
 8002bf2:	e02c      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c00:	461a      	mov	r2, r3
 8002c02:	f000 f8cd 	bl	8002da0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2160      	movs	r1, #96	@ 0x60
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 f8f6 	bl	8002dfe <TIM_ITRx_SetConfig>
      break;
 8002c12:	e01c      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c20:	461a      	mov	r2, r3
 8002c22:	f000 f88f 	bl	8002d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2140      	movs	r1, #64	@ 0x40
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f8e6 	bl	8002dfe <TIM_ITRx_SetConfig>
      break;
 8002c32:	e00c      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f000 f8dd 	bl	8002dfe <TIM_ITRx_SetConfig>
      break;
 8002c44:	e003      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4a:	e000      	b.n	8002c4e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002d38 <TIM_Base_SetConfig+0xd0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00b      	beq.n	8002c98 <TIM_Base_SetConfig+0x30>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c86:	d007      	beq.n	8002c98 <TIM_Base_SetConfig+0x30>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d3c <TIM_Base_SetConfig+0xd4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d003      	beq.n	8002c98 <TIM_Base_SetConfig+0x30>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a2b      	ldr	r2, [pc, #172]	@ (8002d40 <TIM_Base_SetConfig+0xd8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d108      	bne.n	8002caa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a22      	ldr	r2, [pc, #136]	@ (8002d38 <TIM_Base_SetConfig+0xd0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00b      	beq.n	8002cca <TIM_Base_SetConfig+0x62>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb8:	d007      	beq.n	8002cca <TIM_Base_SetConfig+0x62>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8002d3c <TIM_Base_SetConfig+0xd4>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d003      	beq.n	8002cca <TIM_Base_SetConfig+0x62>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8002d40 <TIM_Base_SetConfig+0xd8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d108      	bne.n	8002cdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a0d      	ldr	r2, [pc, #52]	@ (8002d38 <TIM_Base_SetConfig+0xd0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d103      	bne.n	8002d10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d005      	beq.n	8002d2e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f023 0201 	bic.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	611a      	str	r2, [r3, #16]
  }
}
 8002d2e:	bf00      	nop
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	40012c00 	.word	0x40012c00
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800

08002d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f023 0201 	bic.w	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f023 030a 	bic.w	r3, r3, #10
 8002d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f023 0210 	bic.w	r2, r3, #16
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	031b      	lsls	r3, r3, #12
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	621a      	str	r2, [r3, #32]
}
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b085      	sub	sp, #20
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f043 0307 	orr.w	r3, r3, #7
 8002e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	609a      	str	r2, [r3, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b087      	sub	sp, #28
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	021a      	lsls	r2, r3, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	609a      	str	r2, [r3, #8]
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e046      	b.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	@ (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed4:	d009      	beq.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a12      	ldr	r2, [pc, #72]	@ (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a10      	ldr	r2, [pc, #64]	@ (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10c      	bne.n	8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800

08002f2c <siprintf>:
 8002f2c:	b40e      	push	{r1, r2, r3}
 8002f2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002f32:	b510      	push	{r4, lr}
 8002f34:	2400      	movs	r4, #0
 8002f36:	b09d      	sub	sp, #116	@ 0x74
 8002f38:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002f3a:	9002      	str	r0, [sp, #8]
 8002f3c:	9006      	str	r0, [sp, #24]
 8002f3e:	9107      	str	r1, [sp, #28]
 8002f40:	9104      	str	r1, [sp, #16]
 8002f42:	4809      	ldr	r0, [pc, #36]	@ (8002f68 <siprintf+0x3c>)
 8002f44:	4909      	ldr	r1, [pc, #36]	@ (8002f6c <siprintf+0x40>)
 8002f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f4a:	9105      	str	r1, [sp, #20]
 8002f4c:	6800      	ldr	r0, [r0, #0]
 8002f4e:	a902      	add	r1, sp, #8
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002f54:	f000 f992 	bl	800327c <_svfiprintf_r>
 8002f58:	9b02      	ldr	r3, [sp, #8]
 8002f5a:	701c      	strb	r4, [r3, #0]
 8002f5c:	b01d      	add	sp, #116	@ 0x74
 8002f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f62:	b003      	add	sp, #12
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	2000001c 	.word	0x2000001c
 8002f6c:	ffff0208 	.word	0xffff0208

08002f70 <memset>:
 8002f70:	4603      	mov	r3, r0
 8002f72:	4402      	add	r2, r0
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d100      	bne.n	8002f7a <memset+0xa>
 8002f78:	4770      	bx	lr
 8002f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f7e:	e7f9      	b.n	8002f74 <memset+0x4>

08002f80 <__errno>:
 8002f80:	4b01      	ldr	r3, [pc, #4]	@ (8002f88 <__errno+0x8>)
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	2000001c 	.word	0x2000001c

08002f8c <__libc_init_array>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	2600      	movs	r6, #0
 8002f90:	4d0c      	ldr	r5, [pc, #48]	@ (8002fc4 <__libc_init_array+0x38>)
 8002f92:	4c0d      	ldr	r4, [pc, #52]	@ (8002fc8 <__libc_init_array+0x3c>)
 8002f94:	1b64      	subs	r4, r4, r5
 8002f96:	10a4      	asrs	r4, r4, #2
 8002f98:	42a6      	cmp	r6, r4
 8002f9a:	d109      	bne.n	8002fb0 <__libc_init_array+0x24>
 8002f9c:	f000 fc76 	bl	800388c <_init>
 8002fa0:	2600      	movs	r6, #0
 8002fa2:	4d0a      	ldr	r5, [pc, #40]	@ (8002fcc <__libc_init_array+0x40>)
 8002fa4:	4c0a      	ldr	r4, [pc, #40]	@ (8002fd0 <__libc_init_array+0x44>)
 8002fa6:	1b64      	subs	r4, r4, r5
 8002fa8:	10a4      	asrs	r4, r4, #2
 8002faa:	42a6      	cmp	r6, r4
 8002fac:	d105      	bne.n	8002fba <__libc_init_array+0x2e>
 8002fae:	bd70      	pop	{r4, r5, r6, pc}
 8002fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb4:	4798      	blx	r3
 8002fb6:	3601      	adds	r6, #1
 8002fb8:	e7ee      	b.n	8002f98 <__libc_init_array+0xc>
 8002fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fbe:	4798      	blx	r3
 8002fc0:	3601      	adds	r6, #1
 8002fc2:	e7f2      	b.n	8002faa <__libc_init_array+0x1e>
 8002fc4:	080059c0 	.word	0x080059c0
 8002fc8:	080059c0 	.word	0x080059c0
 8002fcc:	080059c0 	.word	0x080059c0
 8002fd0:	080059c4 	.word	0x080059c4

08002fd4 <__retarget_lock_acquire_recursive>:
 8002fd4:	4770      	bx	lr

08002fd6 <__retarget_lock_release_recursive>:
 8002fd6:	4770      	bx	lr

08002fd8 <_free_r>:
 8002fd8:	b538      	push	{r3, r4, r5, lr}
 8002fda:	4605      	mov	r5, r0
 8002fdc:	2900      	cmp	r1, #0
 8002fde:	d040      	beq.n	8003062 <_free_r+0x8a>
 8002fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fe4:	1f0c      	subs	r4, r1, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bfb8      	it	lt
 8002fea:	18e4      	addlt	r4, r4, r3
 8002fec:	f000 f8de 	bl	80031ac <__malloc_lock>
 8002ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8003064 <_free_r+0x8c>)
 8002ff2:	6813      	ldr	r3, [r2, #0]
 8002ff4:	b933      	cbnz	r3, 8003004 <_free_r+0x2c>
 8002ff6:	6063      	str	r3, [r4, #4]
 8002ff8:	6014      	str	r4, [r2, #0]
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003000:	f000 b8da 	b.w	80031b8 <__malloc_unlock>
 8003004:	42a3      	cmp	r3, r4
 8003006:	d908      	bls.n	800301a <_free_r+0x42>
 8003008:	6820      	ldr	r0, [r4, #0]
 800300a:	1821      	adds	r1, r4, r0
 800300c:	428b      	cmp	r3, r1
 800300e:	bf01      	itttt	eq
 8003010:	6819      	ldreq	r1, [r3, #0]
 8003012:	685b      	ldreq	r3, [r3, #4]
 8003014:	1809      	addeq	r1, r1, r0
 8003016:	6021      	streq	r1, [r4, #0]
 8003018:	e7ed      	b.n	8002ff6 <_free_r+0x1e>
 800301a:	461a      	mov	r2, r3
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	b10b      	cbz	r3, 8003024 <_free_r+0x4c>
 8003020:	42a3      	cmp	r3, r4
 8003022:	d9fa      	bls.n	800301a <_free_r+0x42>
 8003024:	6811      	ldr	r1, [r2, #0]
 8003026:	1850      	adds	r0, r2, r1
 8003028:	42a0      	cmp	r0, r4
 800302a:	d10b      	bne.n	8003044 <_free_r+0x6c>
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	4401      	add	r1, r0
 8003030:	1850      	adds	r0, r2, r1
 8003032:	4283      	cmp	r3, r0
 8003034:	6011      	str	r1, [r2, #0]
 8003036:	d1e0      	bne.n	8002ffa <_free_r+0x22>
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4408      	add	r0, r1
 800303e:	6010      	str	r0, [r2, #0]
 8003040:	6053      	str	r3, [r2, #4]
 8003042:	e7da      	b.n	8002ffa <_free_r+0x22>
 8003044:	d902      	bls.n	800304c <_free_r+0x74>
 8003046:	230c      	movs	r3, #12
 8003048:	602b      	str	r3, [r5, #0]
 800304a:	e7d6      	b.n	8002ffa <_free_r+0x22>
 800304c:	6820      	ldr	r0, [r4, #0]
 800304e:	1821      	adds	r1, r4, r0
 8003050:	428b      	cmp	r3, r1
 8003052:	bf01      	itttt	eq
 8003054:	6819      	ldreq	r1, [r3, #0]
 8003056:	685b      	ldreq	r3, [r3, #4]
 8003058:	1809      	addeq	r1, r1, r0
 800305a:	6021      	streq	r1, [r4, #0]
 800305c:	6063      	str	r3, [r4, #4]
 800305e:	6054      	str	r4, [r2, #4]
 8003060:	e7cb      	b.n	8002ffa <_free_r+0x22>
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	20000698 	.word	0x20000698

08003068 <sbrk_aligned>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	4e0f      	ldr	r6, [pc, #60]	@ (80030a8 <sbrk_aligned+0x40>)
 800306c:	460c      	mov	r4, r1
 800306e:	6831      	ldr	r1, [r6, #0]
 8003070:	4605      	mov	r5, r0
 8003072:	b911      	cbnz	r1, 800307a <sbrk_aligned+0x12>
 8003074:	f000 fba8 	bl	80037c8 <_sbrk_r>
 8003078:	6030      	str	r0, [r6, #0]
 800307a:	4621      	mov	r1, r4
 800307c:	4628      	mov	r0, r5
 800307e:	f000 fba3 	bl	80037c8 <_sbrk_r>
 8003082:	1c43      	adds	r3, r0, #1
 8003084:	d103      	bne.n	800308e <sbrk_aligned+0x26>
 8003086:	f04f 34ff 	mov.w	r4, #4294967295
 800308a:	4620      	mov	r0, r4
 800308c:	bd70      	pop	{r4, r5, r6, pc}
 800308e:	1cc4      	adds	r4, r0, #3
 8003090:	f024 0403 	bic.w	r4, r4, #3
 8003094:	42a0      	cmp	r0, r4
 8003096:	d0f8      	beq.n	800308a <sbrk_aligned+0x22>
 8003098:	1a21      	subs	r1, r4, r0
 800309a:	4628      	mov	r0, r5
 800309c:	f000 fb94 	bl	80037c8 <_sbrk_r>
 80030a0:	3001      	adds	r0, #1
 80030a2:	d1f2      	bne.n	800308a <sbrk_aligned+0x22>
 80030a4:	e7ef      	b.n	8003086 <sbrk_aligned+0x1e>
 80030a6:	bf00      	nop
 80030a8:	20000694 	.word	0x20000694

080030ac <_malloc_r>:
 80030ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030b0:	1ccd      	adds	r5, r1, #3
 80030b2:	f025 0503 	bic.w	r5, r5, #3
 80030b6:	3508      	adds	r5, #8
 80030b8:	2d0c      	cmp	r5, #12
 80030ba:	bf38      	it	cc
 80030bc:	250c      	movcc	r5, #12
 80030be:	2d00      	cmp	r5, #0
 80030c0:	4606      	mov	r6, r0
 80030c2:	db01      	blt.n	80030c8 <_malloc_r+0x1c>
 80030c4:	42a9      	cmp	r1, r5
 80030c6:	d904      	bls.n	80030d2 <_malloc_r+0x26>
 80030c8:	230c      	movs	r3, #12
 80030ca:	6033      	str	r3, [r6, #0]
 80030cc:	2000      	movs	r0, #0
 80030ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031a8 <_malloc_r+0xfc>
 80030d6:	f000 f869 	bl	80031ac <__malloc_lock>
 80030da:	f8d8 3000 	ldr.w	r3, [r8]
 80030de:	461c      	mov	r4, r3
 80030e0:	bb44      	cbnz	r4, 8003134 <_malloc_r+0x88>
 80030e2:	4629      	mov	r1, r5
 80030e4:	4630      	mov	r0, r6
 80030e6:	f7ff ffbf 	bl	8003068 <sbrk_aligned>
 80030ea:	1c43      	adds	r3, r0, #1
 80030ec:	4604      	mov	r4, r0
 80030ee:	d158      	bne.n	80031a2 <_malloc_r+0xf6>
 80030f0:	f8d8 4000 	ldr.w	r4, [r8]
 80030f4:	4627      	mov	r7, r4
 80030f6:	2f00      	cmp	r7, #0
 80030f8:	d143      	bne.n	8003182 <_malloc_r+0xd6>
 80030fa:	2c00      	cmp	r4, #0
 80030fc:	d04b      	beq.n	8003196 <_malloc_r+0xea>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	4639      	mov	r1, r7
 8003102:	4630      	mov	r0, r6
 8003104:	eb04 0903 	add.w	r9, r4, r3
 8003108:	f000 fb5e 	bl	80037c8 <_sbrk_r>
 800310c:	4581      	cmp	r9, r0
 800310e:	d142      	bne.n	8003196 <_malloc_r+0xea>
 8003110:	6821      	ldr	r1, [r4, #0]
 8003112:	4630      	mov	r0, r6
 8003114:	1a6d      	subs	r5, r5, r1
 8003116:	4629      	mov	r1, r5
 8003118:	f7ff ffa6 	bl	8003068 <sbrk_aligned>
 800311c:	3001      	adds	r0, #1
 800311e:	d03a      	beq.n	8003196 <_malloc_r+0xea>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	442b      	add	r3, r5
 8003124:	6023      	str	r3, [r4, #0]
 8003126:	f8d8 3000 	ldr.w	r3, [r8]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	bb62      	cbnz	r2, 8003188 <_malloc_r+0xdc>
 800312e:	f8c8 7000 	str.w	r7, [r8]
 8003132:	e00f      	b.n	8003154 <_malloc_r+0xa8>
 8003134:	6822      	ldr	r2, [r4, #0]
 8003136:	1b52      	subs	r2, r2, r5
 8003138:	d420      	bmi.n	800317c <_malloc_r+0xd0>
 800313a:	2a0b      	cmp	r2, #11
 800313c:	d917      	bls.n	800316e <_malloc_r+0xc2>
 800313e:	1961      	adds	r1, r4, r5
 8003140:	42a3      	cmp	r3, r4
 8003142:	6025      	str	r5, [r4, #0]
 8003144:	bf18      	it	ne
 8003146:	6059      	strne	r1, [r3, #4]
 8003148:	6863      	ldr	r3, [r4, #4]
 800314a:	bf08      	it	eq
 800314c:	f8c8 1000 	streq.w	r1, [r8]
 8003150:	5162      	str	r2, [r4, r5]
 8003152:	604b      	str	r3, [r1, #4]
 8003154:	4630      	mov	r0, r6
 8003156:	f000 f82f 	bl	80031b8 <__malloc_unlock>
 800315a:	f104 000b 	add.w	r0, r4, #11
 800315e:	1d23      	adds	r3, r4, #4
 8003160:	f020 0007 	bic.w	r0, r0, #7
 8003164:	1ac2      	subs	r2, r0, r3
 8003166:	bf1c      	itt	ne
 8003168:	1a1b      	subne	r3, r3, r0
 800316a:	50a3      	strne	r3, [r4, r2]
 800316c:	e7af      	b.n	80030ce <_malloc_r+0x22>
 800316e:	6862      	ldr	r2, [r4, #4]
 8003170:	42a3      	cmp	r3, r4
 8003172:	bf0c      	ite	eq
 8003174:	f8c8 2000 	streq.w	r2, [r8]
 8003178:	605a      	strne	r2, [r3, #4]
 800317a:	e7eb      	b.n	8003154 <_malloc_r+0xa8>
 800317c:	4623      	mov	r3, r4
 800317e:	6864      	ldr	r4, [r4, #4]
 8003180:	e7ae      	b.n	80030e0 <_malloc_r+0x34>
 8003182:	463c      	mov	r4, r7
 8003184:	687f      	ldr	r7, [r7, #4]
 8003186:	e7b6      	b.n	80030f6 <_malloc_r+0x4a>
 8003188:	461a      	mov	r2, r3
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	42a3      	cmp	r3, r4
 800318e:	d1fb      	bne.n	8003188 <_malloc_r+0xdc>
 8003190:	2300      	movs	r3, #0
 8003192:	6053      	str	r3, [r2, #4]
 8003194:	e7de      	b.n	8003154 <_malloc_r+0xa8>
 8003196:	230c      	movs	r3, #12
 8003198:	4630      	mov	r0, r6
 800319a:	6033      	str	r3, [r6, #0]
 800319c:	f000 f80c 	bl	80031b8 <__malloc_unlock>
 80031a0:	e794      	b.n	80030cc <_malloc_r+0x20>
 80031a2:	6005      	str	r5, [r0, #0]
 80031a4:	e7d6      	b.n	8003154 <_malloc_r+0xa8>
 80031a6:	bf00      	nop
 80031a8:	20000698 	.word	0x20000698

080031ac <__malloc_lock>:
 80031ac:	4801      	ldr	r0, [pc, #4]	@ (80031b4 <__malloc_lock+0x8>)
 80031ae:	f7ff bf11 	b.w	8002fd4 <__retarget_lock_acquire_recursive>
 80031b2:	bf00      	nop
 80031b4:	20000690 	.word	0x20000690

080031b8 <__malloc_unlock>:
 80031b8:	4801      	ldr	r0, [pc, #4]	@ (80031c0 <__malloc_unlock+0x8>)
 80031ba:	f7ff bf0c 	b.w	8002fd6 <__retarget_lock_release_recursive>
 80031be:	bf00      	nop
 80031c0:	20000690 	.word	0x20000690

080031c4 <__ssputs_r>:
 80031c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c8:	461f      	mov	r7, r3
 80031ca:	688e      	ldr	r6, [r1, #8]
 80031cc:	4682      	mov	sl, r0
 80031ce:	42be      	cmp	r6, r7
 80031d0:	460c      	mov	r4, r1
 80031d2:	4690      	mov	r8, r2
 80031d4:	680b      	ldr	r3, [r1, #0]
 80031d6:	d82d      	bhi.n	8003234 <__ssputs_r+0x70>
 80031d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80031e0:	d026      	beq.n	8003230 <__ssputs_r+0x6c>
 80031e2:	6965      	ldr	r5, [r4, #20]
 80031e4:	6909      	ldr	r1, [r1, #16]
 80031e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031ea:	eba3 0901 	sub.w	r9, r3, r1
 80031ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031f2:	1c7b      	adds	r3, r7, #1
 80031f4:	444b      	add	r3, r9
 80031f6:	106d      	asrs	r5, r5, #1
 80031f8:	429d      	cmp	r5, r3
 80031fa:	bf38      	it	cc
 80031fc:	461d      	movcc	r5, r3
 80031fe:	0553      	lsls	r3, r2, #21
 8003200:	d527      	bpl.n	8003252 <__ssputs_r+0x8e>
 8003202:	4629      	mov	r1, r5
 8003204:	f7ff ff52 	bl	80030ac <_malloc_r>
 8003208:	4606      	mov	r6, r0
 800320a:	b360      	cbz	r0, 8003266 <__ssputs_r+0xa2>
 800320c:	464a      	mov	r2, r9
 800320e:	6921      	ldr	r1, [r4, #16]
 8003210:	f000 faf8 	bl	8003804 <memcpy>
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800321a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800321e:	81a3      	strh	r3, [r4, #12]
 8003220:	6126      	str	r6, [r4, #16]
 8003222:	444e      	add	r6, r9
 8003224:	6026      	str	r6, [r4, #0]
 8003226:	463e      	mov	r6, r7
 8003228:	6165      	str	r5, [r4, #20]
 800322a:	eba5 0509 	sub.w	r5, r5, r9
 800322e:	60a5      	str	r5, [r4, #8]
 8003230:	42be      	cmp	r6, r7
 8003232:	d900      	bls.n	8003236 <__ssputs_r+0x72>
 8003234:	463e      	mov	r6, r7
 8003236:	4632      	mov	r2, r6
 8003238:	4641      	mov	r1, r8
 800323a:	6820      	ldr	r0, [r4, #0]
 800323c:	f000 faaa 	bl	8003794 <memmove>
 8003240:	2000      	movs	r0, #0
 8003242:	68a3      	ldr	r3, [r4, #8]
 8003244:	1b9b      	subs	r3, r3, r6
 8003246:	60a3      	str	r3, [r4, #8]
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	4433      	add	r3, r6
 800324c:	6023      	str	r3, [r4, #0]
 800324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003252:	462a      	mov	r2, r5
 8003254:	f000 fae4 	bl	8003820 <_realloc_r>
 8003258:	4606      	mov	r6, r0
 800325a:	2800      	cmp	r0, #0
 800325c:	d1e0      	bne.n	8003220 <__ssputs_r+0x5c>
 800325e:	4650      	mov	r0, sl
 8003260:	6921      	ldr	r1, [r4, #16]
 8003262:	f7ff feb9 	bl	8002fd8 <_free_r>
 8003266:	230c      	movs	r3, #12
 8003268:	f8ca 3000 	str.w	r3, [sl]
 800326c:	89a3      	ldrh	r3, [r4, #12]
 800326e:	f04f 30ff 	mov.w	r0, #4294967295
 8003272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003276:	81a3      	strh	r3, [r4, #12]
 8003278:	e7e9      	b.n	800324e <__ssputs_r+0x8a>
	...

0800327c <_svfiprintf_r>:
 800327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003280:	4698      	mov	r8, r3
 8003282:	898b      	ldrh	r3, [r1, #12]
 8003284:	4607      	mov	r7, r0
 8003286:	061b      	lsls	r3, r3, #24
 8003288:	460d      	mov	r5, r1
 800328a:	4614      	mov	r4, r2
 800328c:	b09d      	sub	sp, #116	@ 0x74
 800328e:	d510      	bpl.n	80032b2 <_svfiprintf_r+0x36>
 8003290:	690b      	ldr	r3, [r1, #16]
 8003292:	b973      	cbnz	r3, 80032b2 <_svfiprintf_r+0x36>
 8003294:	2140      	movs	r1, #64	@ 0x40
 8003296:	f7ff ff09 	bl	80030ac <_malloc_r>
 800329a:	6028      	str	r0, [r5, #0]
 800329c:	6128      	str	r0, [r5, #16]
 800329e:	b930      	cbnz	r0, 80032ae <_svfiprintf_r+0x32>
 80032a0:	230c      	movs	r3, #12
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	f04f 30ff 	mov.w	r0, #4294967295
 80032a8:	b01d      	add	sp, #116	@ 0x74
 80032aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ae:	2340      	movs	r3, #64	@ 0x40
 80032b0:	616b      	str	r3, [r5, #20]
 80032b2:	2300      	movs	r3, #0
 80032b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80032b6:	2320      	movs	r3, #32
 80032b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032bc:	2330      	movs	r3, #48	@ 0x30
 80032be:	f04f 0901 	mov.w	r9, #1
 80032c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80032c6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003460 <_svfiprintf_r+0x1e4>
 80032ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032ce:	4623      	mov	r3, r4
 80032d0:	469a      	mov	sl, r3
 80032d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032d6:	b10a      	cbz	r2, 80032dc <_svfiprintf_r+0x60>
 80032d8:	2a25      	cmp	r2, #37	@ 0x25
 80032da:	d1f9      	bne.n	80032d0 <_svfiprintf_r+0x54>
 80032dc:	ebba 0b04 	subs.w	fp, sl, r4
 80032e0:	d00b      	beq.n	80032fa <_svfiprintf_r+0x7e>
 80032e2:	465b      	mov	r3, fp
 80032e4:	4622      	mov	r2, r4
 80032e6:	4629      	mov	r1, r5
 80032e8:	4638      	mov	r0, r7
 80032ea:	f7ff ff6b 	bl	80031c4 <__ssputs_r>
 80032ee:	3001      	adds	r0, #1
 80032f0:	f000 80a7 	beq.w	8003442 <_svfiprintf_r+0x1c6>
 80032f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032f6:	445a      	add	r2, fp
 80032f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80032fa:	f89a 3000 	ldrb.w	r3, [sl]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 809f 	beq.w	8003442 <_svfiprintf_r+0x1c6>
 8003304:	2300      	movs	r3, #0
 8003306:	f04f 32ff 	mov.w	r2, #4294967295
 800330a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800330e:	f10a 0a01 	add.w	sl, sl, #1
 8003312:	9304      	str	r3, [sp, #16]
 8003314:	9307      	str	r3, [sp, #28]
 8003316:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800331a:	931a      	str	r3, [sp, #104]	@ 0x68
 800331c:	4654      	mov	r4, sl
 800331e:	2205      	movs	r2, #5
 8003320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003324:	484e      	ldr	r0, [pc, #312]	@ (8003460 <_svfiprintf_r+0x1e4>)
 8003326:	f000 fa5f 	bl	80037e8 <memchr>
 800332a:	9a04      	ldr	r2, [sp, #16]
 800332c:	b9d8      	cbnz	r0, 8003366 <_svfiprintf_r+0xea>
 800332e:	06d0      	lsls	r0, r2, #27
 8003330:	bf44      	itt	mi
 8003332:	2320      	movmi	r3, #32
 8003334:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003338:	0711      	lsls	r1, r2, #28
 800333a:	bf44      	itt	mi
 800333c:	232b      	movmi	r3, #43	@ 0x2b
 800333e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003342:	f89a 3000 	ldrb.w	r3, [sl]
 8003346:	2b2a      	cmp	r3, #42	@ 0x2a
 8003348:	d015      	beq.n	8003376 <_svfiprintf_r+0xfa>
 800334a:	4654      	mov	r4, sl
 800334c:	2000      	movs	r0, #0
 800334e:	f04f 0c0a 	mov.w	ip, #10
 8003352:	9a07      	ldr	r2, [sp, #28]
 8003354:	4621      	mov	r1, r4
 8003356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800335a:	3b30      	subs	r3, #48	@ 0x30
 800335c:	2b09      	cmp	r3, #9
 800335e:	d94b      	bls.n	80033f8 <_svfiprintf_r+0x17c>
 8003360:	b1b0      	cbz	r0, 8003390 <_svfiprintf_r+0x114>
 8003362:	9207      	str	r2, [sp, #28]
 8003364:	e014      	b.n	8003390 <_svfiprintf_r+0x114>
 8003366:	eba0 0308 	sub.w	r3, r0, r8
 800336a:	fa09 f303 	lsl.w	r3, r9, r3
 800336e:	4313      	orrs	r3, r2
 8003370:	46a2      	mov	sl, r4
 8003372:	9304      	str	r3, [sp, #16]
 8003374:	e7d2      	b.n	800331c <_svfiprintf_r+0xa0>
 8003376:	9b03      	ldr	r3, [sp, #12]
 8003378:	1d19      	adds	r1, r3, #4
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	9103      	str	r1, [sp, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	bfbb      	ittet	lt
 8003382:	425b      	neglt	r3, r3
 8003384:	f042 0202 	orrlt.w	r2, r2, #2
 8003388:	9307      	strge	r3, [sp, #28]
 800338a:	9307      	strlt	r3, [sp, #28]
 800338c:	bfb8      	it	lt
 800338e:	9204      	strlt	r2, [sp, #16]
 8003390:	7823      	ldrb	r3, [r4, #0]
 8003392:	2b2e      	cmp	r3, #46	@ 0x2e
 8003394:	d10a      	bne.n	80033ac <_svfiprintf_r+0x130>
 8003396:	7863      	ldrb	r3, [r4, #1]
 8003398:	2b2a      	cmp	r3, #42	@ 0x2a
 800339a:	d132      	bne.n	8003402 <_svfiprintf_r+0x186>
 800339c:	9b03      	ldr	r3, [sp, #12]
 800339e:	3402      	adds	r4, #2
 80033a0:	1d1a      	adds	r2, r3, #4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	9203      	str	r2, [sp, #12]
 80033a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033aa:	9305      	str	r3, [sp, #20]
 80033ac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003464 <_svfiprintf_r+0x1e8>
 80033b0:	2203      	movs	r2, #3
 80033b2:	4650      	mov	r0, sl
 80033b4:	7821      	ldrb	r1, [r4, #0]
 80033b6:	f000 fa17 	bl	80037e8 <memchr>
 80033ba:	b138      	cbz	r0, 80033cc <_svfiprintf_r+0x150>
 80033bc:	2240      	movs	r2, #64	@ 0x40
 80033be:	9b04      	ldr	r3, [sp, #16]
 80033c0:	eba0 000a 	sub.w	r0, r0, sl
 80033c4:	4082      	lsls	r2, r0
 80033c6:	4313      	orrs	r3, r2
 80033c8:	3401      	adds	r4, #1
 80033ca:	9304      	str	r3, [sp, #16]
 80033cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d0:	2206      	movs	r2, #6
 80033d2:	4825      	ldr	r0, [pc, #148]	@ (8003468 <_svfiprintf_r+0x1ec>)
 80033d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033d8:	f000 fa06 	bl	80037e8 <memchr>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d036      	beq.n	800344e <_svfiprintf_r+0x1d2>
 80033e0:	4b22      	ldr	r3, [pc, #136]	@ (800346c <_svfiprintf_r+0x1f0>)
 80033e2:	bb1b      	cbnz	r3, 800342c <_svfiprintf_r+0x1b0>
 80033e4:	9b03      	ldr	r3, [sp, #12]
 80033e6:	3307      	adds	r3, #7
 80033e8:	f023 0307 	bic.w	r3, r3, #7
 80033ec:	3308      	adds	r3, #8
 80033ee:	9303      	str	r3, [sp, #12]
 80033f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033f2:	4433      	add	r3, r6
 80033f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80033f6:	e76a      	b.n	80032ce <_svfiprintf_r+0x52>
 80033f8:	460c      	mov	r4, r1
 80033fa:	2001      	movs	r0, #1
 80033fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003400:	e7a8      	b.n	8003354 <_svfiprintf_r+0xd8>
 8003402:	2300      	movs	r3, #0
 8003404:	f04f 0c0a 	mov.w	ip, #10
 8003408:	4619      	mov	r1, r3
 800340a:	3401      	adds	r4, #1
 800340c:	9305      	str	r3, [sp, #20]
 800340e:	4620      	mov	r0, r4
 8003410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003414:	3a30      	subs	r2, #48	@ 0x30
 8003416:	2a09      	cmp	r2, #9
 8003418:	d903      	bls.n	8003422 <_svfiprintf_r+0x1a6>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0c6      	beq.n	80033ac <_svfiprintf_r+0x130>
 800341e:	9105      	str	r1, [sp, #20]
 8003420:	e7c4      	b.n	80033ac <_svfiprintf_r+0x130>
 8003422:	4604      	mov	r4, r0
 8003424:	2301      	movs	r3, #1
 8003426:	fb0c 2101 	mla	r1, ip, r1, r2
 800342a:	e7f0      	b.n	800340e <_svfiprintf_r+0x192>
 800342c:	ab03      	add	r3, sp, #12
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	462a      	mov	r2, r5
 8003432:	4638      	mov	r0, r7
 8003434:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <_svfiprintf_r+0x1f4>)
 8003436:	a904      	add	r1, sp, #16
 8003438:	f3af 8000 	nop.w
 800343c:	1c42      	adds	r2, r0, #1
 800343e:	4606      	mov	r6, r0
 8003440:	d1d6      	bne.n	80033f0 <_svfiprintf_r+0x174>
 8003442:	89ab      	ldrh	r3, [r5, #12]
 8003444:	065b      	lsls	r3, r3, #25
 8003446:	f53f af2d 	bmi.w	80032a4 <_svfiprintf_r+0x28>
 800344a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800344c:	e72c      	b.n	80032a8 <_svfiprintf_r+0x2c>
 800344e:	ab03      	add	r3, sp, #12
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	462a      	mov	r2, r5
 8003454:	4638      	mov	r0, r7
 8003456:	4b06      	ldr	r3, [pc, #24]	@ (8003470 <_svfiprintf_r+0x1f4>)
 8003458:	a904      	add	r1, sp, #16
 800345a:	f000 f87d 	bl	8003558 <_printf_i>
 800345e:	e7ed      	b.n	800343c <_svfiprintf_r+0x1c0>
 8003460:	0800598a 	.word	0x0800598a
 8003464:	08005990 	.word	0x08005990
 8003468:	08005994 	.word	0x08005994
 800346c:	00000000 	.word	0x00000000
 8003470:	080031c5 	.word	0x080031c5

08003474 <_printf_common>:
 8003474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003478:	4616      	mov	r6, r2
 800347a:	4698      	mov	r8, r3
 800347c:	688a      	ldr	r2, [r1, #8]
 800347e:	690b      	ldr	r3, [r1, #16]
 8003480:	4607      	mov	r7, r0
 8003482:	4293      	cmp	r3, r2
 8003484:	bfb8      	it	lt
 8003486:	4613      	movlt	r3, r2
 8003488:	6033      	str	r3, [r6, #0]
 800348a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800348e:	460c      	mov	r4, r1
 8003490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003494:	b10a      	cbz	r2, 800349a <_printf_common+0x26>
 8003496:	3301      	adds	r3, #1
 8003498:	6033      	str	r3, [r6, #0]
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	0699      	lsls	r1, r3, #26
 800349e:	bf42      	ittt	mi
 80034a0:	6833      	ldrmi	r3, [r6, #0]
 80034a2:	3302      	addmi	r3, #2
 80034a4:	6033      	strmi	r3, [r6, #0]
 80034a6:	6825      	ldr	r5, [r4, #0]
 80034a8:	f015 0506 	ands.w	r5, r5, #6
 80034ac:	d106      	bne.n	80034bc <_printf_common+0x48>
 80034ae:	f104 0a19 	add.w	sl, r4, #25
 80034b2:	68e3      	ldr	r3, [r4, #12]
 80034b4:	6832      	ldr	r2, [r6, #0]
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	42ab      	cmp	r3, r5
 80034ba:	dc2b      	bgt.n	8003514 <_printf_common+0xa0>
 80034bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034c0:	6822      	ldr	r2, [r4, #0]
 80034c2:	3b00      	subs	r3, #0
 80034c4:	bf18      	it	ne
 80034c6:	2301      	movne	r3, #1
 80034c8:	0692      	lsls	r2, r2, #26
 80034ca:	d430      	bmi.n	800352e <_printf_common+0xba>
 80034cc:	4641      	mov	r1, r8
 80034ce:	4638      	mov	r0, r7
 80034d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034d4:	47c8      	blx	r9
 80034d6:	3001      	adds	r0, #1
 80034d8:	d023      	beq.n	8003522 <_printf_common+0xae>
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	6922      	ldr	r2, [r4, #16]
 80034de:	f003 0306 	and.w	r3, r3, #6
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	bf14      	ite	ne
 80034e6:	2500      	movne	r5, #0
 80034e8:	6833      	ldreq	r3, [r6, #0]
 80034ea:	f04f 0600 	mov.w	r6, #0
 80034ee:	bf08      	it	eq
 80034f0:	68e5      	ldreq	r5, [r4, #12]
 80034f2:	f104 041a 	add.w	r4, r4, #26
 80034f6:	bf08      	it	eq
 80034f8:	1aed      	subeq	r5, r5, r3
 80034fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034fe:	bf08      	it	eq
 8003500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003504:	4293      	cmp	r3, r2
 8003506:	bfc4      	itt	gt
 8003508:	1a9b      	subgt	r3, r3, r2
 800350a:	18ed      	addgt	r5, r5, r3
 800350c:	42b5      	cmp	r5, r6
 800350e:	d11a      	bne.n	8003546 <_printf_common+0xd2>
 8003510:	2000      	movs	r0, #0
 8003512:	e008      	b.n	8003526 <_printf_common+0xb2>
 8003514:	2301      	movs	r3, #1
 8003516:	4652      	mov	r2, sl
 8003518:	4641      	mov	r1, r8
 800351a:	4638      	mov	r0, r7
 800351c:	47c8      	blx	r9
 800351e:	3001      	adds	r0, #1
 8003520:	d103      	bne.n	800352a <_printf_common+0xb6>
 8003522:	f04f 30ff 	mov.w	r0, #4294967295
 8003526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800352a:	3501      	adds	r5, #1
 800352c:	e7c1      	b.n	80034b2 <_printf_common+0x3e>
 800352e:	2030      	movs	r0, #48	@ 0x30
 8003530:	18e1      	adds	r1, r4, r3
 8003532:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800353c:	4422      	add	r2, r4
 800353e:	3302      	adds	r3, #2
 8003540:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003544:	e7c2      	b.n	80034cc <_printf_common+0x58>
 8003546:	2301      	movs	r3, #1
 8003548:	4622      	mov	r2, r4
 800354a:	4641      	mov	r1, r8
 800354c:	4638      	mov	r0, r7
 800354e:	47c8      	blx	r9
 8003550:	3001      	adds	r0, #1
 8003552:	d0e6      	beq.n	8003522 <_printf_common+0xae>
 8003554:	3601      	adds	r6, #1
 8003556:	e7d9      	b.n	800350c <_printf_common+0x98>

08003558 <_printf_i>:
 8003558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800355c:	7e0f      	ldrb	r7, [r1, #24]
 800355e:	4691      	mov	r9, r2
 8003560:	2f78      	cmp	r7, #120	@ 0x78
 8003562:	4680      	mov	r8, r0
 8003564:	460c      	mov	r4, r1
 8003566:	469a      	mov	sl, r3
 8003568:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800356a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800356e:	d807      	bhi.n	8003580 <_printf_i+0x28>
 8003570:	2f62      	cmp	r7, #98	@ 0x62
 8003572:	d80a      	bhi.n	800358a <_printf_i+0x32>
 8003574:	2f00      	cmp	r7, #0
 8003576:	f000 80d1 	beq.w	800371c <_printf_i+0x1c4>
 800357a:	2f58      	cmp	r7, #88	@ 0x58
 800357c:	f000 80b8 	beq.w	80036f0 <_printf_i+0x198>
 8003580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003584:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003588:	e03a      	b.n	8003600 <_printf_i+0xa8>
 800358a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800358e:	2b15      	cmp	r3, #21
 8003590:	d8f6      	bhi.n	8003580 <_printf_i+0x28>
 8003592:	a101      	add	r1, pc, #4	@ (adr r1, 8003598 <_printf_i+0x40>)
 8003594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003598:	080035f1 	.word	0x080035f1
 800359c:	08003605 	.word	0x08003605
 80035a0:	08003581 	.word	0x08003581
 80035a4:	08003581 	.word	0x08003581
 80035a8:	08003581 	.word	0x08003581
 80035ac:	08003581 	.word	0x08003581
 80035b0:	08003605 	.word	0x08003605
 80035b4:	08003581 	.word	0x08003581
 80035b8:	08003581 	.word	0x08003581
 80035bc:	08003581 	.word	0x08003581
 80035c0:	08003581 	.word	0x08003581
 80035c4:	08003703 	.word	0x08003703
 80035c8:	0800362f 	.word	0x0800362f
 80035cc:	080036bd 	.word	0x080036bd
 80035d0:	08003581 	.word	0x08003581
 80035d4:	08003581 	.word	0x08003581
 80035d8:	08003725 	.word	0x08003725
 80035dc:	08003581 	.word	0x08003581
 80035e0:	0800362f 	.word	0x0800362f
 80035e4:	08003581 	.word	0x08003581
 80035e8:	08003581 	.word	0x08003581
 80035ec:	080036c5 	.word	0x080036c5
 80035f0:	6833      	ldr	r3, [r6, #0]
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6032      	str	r2, [r6, #0]
 80035f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003600:	2301      	movs	r3, #1
 8003602:	e09c      	b.n	800373e <_printf_i+0x1e6>
 8003604:	6833      	ldr	r3, [r6, #0]
 8003606:	6820      	ldr	r0, [r4, #0]
 8003608:	1d19      	adds	r1, r3, #4
 800360a:	6031      	str	r1, [r6, #0]
 800360c:	0606      	lsls	r6, r0, #24
 800360e:	d501      	bpl.n	8003614 <_printf_i+0xbc>
 8003610:	681d      	ldr	r5, [r3, #0]
 8003612:	e003      	b.n	800361c <_printf_i+0xc4>
 8003614:	0645      	lsls	r5, r0, #25
 8003616:	d5fb      	bpl.n	8003610 <_printf_i+0xb8>
 8003618:	f9b3 5000 	ldrsh.w	r5, [r3]
 800361c:	2d00      	cmp	r5, #0
 800361e:	da03      	bge.n	8003628 <_printf_i+0xd0>
 8003620:	232d      	movs	r3, #45	@ 0x2d
 8003622:	426d      	negs	r5, r5
 8003624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003628:	230a      	movs	r3, #10
 800362a:	4858      	ldr	r0, [pc, #352]	@ (800378c <_printf_i+0x234>)
 800362c:	e011      	b.n	8003652 <_printf_i+0xfa>
 800362e:	6821      	ldr	r1, [r4, #0]
 8003630:	6833      	ldr	r3, [r6, #0]
 8003632:	0608      	lsls	r0, r1, #24
 8003634:	f853 5b04 	ldr.w	r5, [r3], #4
 8003638:	d402      	bmi.n	8003640 <_printf_i+0xe8>
 800363a:	0649      	lsls	r1, r1, #25
 800363c:	bf48      	it	mi
 800363e:	b2ad      	uxthmi	r5, r5
 8003640:	2f6f      	cmp	r7, #111	@ 0x6f
 8003642:	6033      	str	r3, [r6, #0]
 8003644:	bf14      	ite	ne
 8003646:	230a      	movne	r3, #10
 8003648:	2308      	moveq	r3, #8
 800364a:	4850      	ldr	r0, [pc, #320]	@ (800378c <_printf_i+0x234>)
 800364c:	2100      	movs	r1, #0
 800364e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003652:	6866      	ldr	r6, [r4, #4]
 8003654:	2e00      	cmp	r6, #0
 8003656:	60a6      	str	r6, [r4, #8]
 8003658:	db05      	blt.n	8003666 <_printf_i+0x10e>
 800365a:	6821      	ldr	r1, [r4, #0]
 800365c:	432e      	orrs	r6, r5
 800365e:	f021 0104 	bic.w	r1, r1, #4
 8003662:	6021      	str	r1, [r4, #0]
 8003664:	d04b      	beq.n	80036fe <_printf_i+0x1a6>
 8003666:	4616      	mov	r6, r2
 8003668:	fbb5 f1f3 	udiv	r1, r5, r3
 800366c:	fb03 5711 	mls	r7, r3, r1, r5
 8003670:	5dc7      	ldrb	r7, [r0, r7]
 8003672:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003676:	462f      	mov	r7, r5
 8003678:	42bb      	cmp	r3, r7
 800367a:	460d      	mov	r5, r1
 800367c:	d9f4      	bls.n	8003668 <_printf_i+0x110>
 800367e:	2b08      	cmp	r3, #8
 8003680:	d10b      	bne.n	800369a <_printf_i+0x142>
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	07df      	lsls	r7, r3, #31
 8003686:	d508      	bpl.n	800369a <_printf_i+0x142>
 8003688:	6923      	ldr	r3, [r4, #16]
 800368a:	6861      	ldr	r1, [r4, #4]
 800368c:	4299      	cmp	r1, r3
 800368e:	bfde      	ittt	le
 8003690:	2330      	movle	r3, #48	@ 0x30
 8003692:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003696:	f106 36ff 	addle.w	r6, r6, #4294967295
 800369a:	1b92      	subs	r2, r2, r6
 800369c:	6122      	str	r2, [r4, #16]
 800369e:	464b      	mov	r3, r9
 80036a0:	4621      	mov	r1, r4
 80036a2:	4640      	mov	r0, r8
 80036a4:	f8cd a000 	str.w	sl, [sp]
 80036a8:	aa03      	add	r2, sp, #12
 80036aa:	f7ff fee3 	bl	8003474 <_printf_common>
 80036ae:	3001      	adds	r0, #1
 80036b0:	d14a      	bne.n	8003748 <_printf_i+0x1f0>
 80036b2:	f04f 30ff 	mov.w	r0, #4294967295
 80036b6:	b004      	add	sp, #16
 80036b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	f043 0320 	orr.w	r3, r3, #32
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	2778      	movs	r7, #120	@ 0x78
 80036c6:	4832      	ldr	r0, [pc, #200]	@ (8003790 <_printf_i+0x238>)
 80036c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	6831      	ldr	r1, [r6, #0]
 80036d0:	061f      	lsls	r7, r3, #24
 80036d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80036d6:	d402      	bmi.n	80036de <_printf_i+0x186>
 80036d8:	065f      	lsls	r7, r3, #25
 80036da:	bf48      	it	mi
 80036dc:	b2ad      	uxthmi	r5, r5
 80036de:	6031      	str	r1, [r6, #0]
 80036e0:	07d9      	lsls	r1, r3, #31
 80036e2:	bf44      	itt	mi
 80036e4:	f043 0320 	orrmi.w	r3, r3, #32
 80036e8:	6023      	strmi	r3, [r4, #0]
 80036ea:	b11d      	cbz	r5, 80036f4 <_printf_i+0x19c>
 80036ec:	2310      	movs	r3, #16
 80036ee:	e7ad      	b.n	800364c <_printf_i+0xf4>
 80036f0:	4826      	ldr	r0, [pc, #152]	@ (800378c <_printf_i+0x234>)
 80036f2:	e7e9      	b.n	80036c8 <_printf_i+0x170>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	f023 0320 	bic.w	r3, r3, #32
 80036fa:	6023      	str	r3, [r4, #0]
 80036fc:	e7f6      	b.n	80036ec <_printf_i+0x194>
 80036fe:	4616      	mov	r6, r2
 8003700:	e7bd      	b.n	800367e <_printf_i+0x126>
 8003702:	6833      	ldr	r3, [r6, #0]
 8003704:	6825      	ldr	r5, [r4, #0]
 8003706:	1d18      	adds	r0, r3, #4
 8003708:	6961      	ldr	r1, [r4, #20]
 800370a:	6030      	str	r0, [r6, #0]
 800370c:	062e      	lsls	r6, r5, #24
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	d501      	bpl.n	8003716 <_printf_i+0x1be>
 8003712:	6019      	str	r1, [r3, #0]
 8003714:	e002      	b.n	800371c <_printf_i+0x1c4>
 8003716:	0668      	lsls	r0, r5, #25
 8003718:	d5fb      	bpl.n	8003712 <_printf_i+0x1ba>
 800371a:	8019      	strh	r1, [r3, #0]
 800371c:	2300      	movs	r3, #0
 800371e:	4616      	mov	r6, r2
 8003720:	6123      	str	r3, [r4, #16]
 8003722:	e7bc      	b.n	800369e <_printf_i+0x146>
 8003724:	6833      	ldr	r3, [r6, #0]
 8003726:	2100      	movs	r1, #0
 8003728:	1d1a      	adds	r2, r3, #4
 800372a:	6032      	str	r2, [r6, #0]
 800372c:	681e      	ldr	r6, [r3, #0]
 800372e:	6862      	ldr	r2, [r4, #4]
 8003730:	4630      	mov	r0, r6
 8003732:	f000 f859 	bl	80037e8 <memchr>
 8003736:	b108      	cbz	r0, 800373c <_printf_i+0x1e4>
 8003738:	1b80      	subs	r0, r0, r6
 800373a:	6060      	str	r0, [r4, #4]
 800373c:	6863      	ldr	r3, [r4, #4]
 800373e:	6123      	str	r3, [r4, #16]
 8003740:	2300      	movs	r3, #0
 8003742:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003746:	e7aa      	b.n	800369e <_printf_i+0x146>
 8003748:	4632      	mov	r2, r6
 800374a:	4649      	mov	r1, r9
 800374c:	4640      	mov	r0, r8
 800374e:	6923      	ldr	r3, [r4, #16]
 8003750:	47d0      	blx	sl
 8003752:	3001      	adds	r0, #1
 8003754:	d0ad      	beq.n	80036b2 <_printf_i+0x15a>
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	079b      	lsls	r3, r3, #30
 800375a:	d413      	bmi.n	8003784 <_printf_i+0x22c>
 800375c:	68e0      	ldr	r0, [r4, #12]
 800375e:	9b03      	ldr	r3, [sp, #12]
 8003760:	4298      	cmp	r0, r3
 8003762:	bfb8      	it	lt
 8003764:	4618      	movlt	r0, r3
 8003766:	e7a6      	b.n	80036b6 <_printf_i+0x15e>
 8003768:	2301      	movs	r3, #1
 800376a:	4632      	mov	r2, r6
 800376c:	4649      	mov	r1, r9
 800376e:	4640      	mov	r0, r8
 8003770:	47d0      	blx	sl
 8003772:	3001      	adds	r0, #1
 8003774:	d09d      	beq.n	80036b2 <_printf_i+0x15a>
 8003776:	3501      	adds	r5, #1
 8003778:	68e3      	ldr	r3, [r4, #12]
 800377a:	9903      	ldr	r1, [sp, #12]
 800377c:	1a5b      	subs	r3, r3, r1
 800377e:	42ab      	cmp	r3, r5
 8003780:	dcf2      	bgt.n	8003768 <_printf_i+0x210>
 8003782:	e7eb      	b.n	800375c <_printf_i+0x204>
 8003784:	2500      	movs	r5, #0
 8003786:	f104 0619 	add.w	r6, r4, #25
 800378a:	e7f5      	b.n	8003778 <_printf_i+0x220>
 800378c:	0800599b 	.word	0x0800599b
 8003790:	080059ac 	.word	0x080059ac

08003794 <memmove>:
 8003794:	4288      	cmp	r0, r1
 8003796:	b510      	push	{r4, lr}
 8003798:	eb01 0402 	add.w	r4, r1, r2
 800379c:	d902      	bls.n	80037a4 <memmove+0x10>
 800379e:	4284      	cmp	r4, r0
 80037a0:	4623      	mov	r3, r4
 80037a2:	d807      	bhi.n	80037b4 <memmove+0x20>
 80037a4:	1e43      	subs	r3, r0, #1
 80037a6:	42a1      	cmp	r1, r4
 80037a8:	d008      	beq.n	80037bc <memmove+0x28>
 80037aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037b2:	e7f8      	b.n	80037a6 <memmove+0x12>
 80037b4:	4601      	mov	r1, r0
 80037b6:	4402      	add	r2, r0
 80037b8:	428a      	cmp	r2, r1
 80037ba:	d100      	bne.n	80037be <memmove+0x2a>
 80037bc:	bd10      	pop	{r4, pc}
 80037be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037c6:	e7f7      	b.n	80037b8 <memmove+0x24>

080037c8 <_sbrk_r>:
 80037c8:	b538      	push	{r3, r4, r5, lr}
 80037ca:	2300      	movs	r3, #0
 80037cc:	4d05      	ldr	r5, [pc, #20]	@ (80037e4 <_sbrk_r+0x1c>)
 80037ce:	4604      	mov	r4, r0
 80037d0:	4608      	mov	r0, r1
 80037d2:	602b      	str	r3, [r5, #0]
 80037d4:	f7fd fcac 	bl	8001130 <_sbrk>
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d102      	bne.n	80037e2 <_sbrk_r+0x1a>
 80037dc:	682b      	ldr	r3, [r5, #0]
 80037de:	b103      	cbz	r3, 80037e2 <_sbrk_r+0x1a>
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	2000068c 	.word	0x2000068c

080037e8 <memchr>:
 80037e8:	4603      	mov	r3, r0
 80037ea:	b510      	push	{r4, lr}
 80037ec:	b2c9      	uxtb	r1, r1
 80037ee:	4402      	add	r2, r0
 80037f0:	4293      	cmp	r3, r2
 80037f2:	4618      	mov	r0, r3
 80037f4:	d101      	bne.n	80037fa <memchr+0x12>
 80037f6:	2000      	movs	r0, #0
 80037f8:	e003      	b.n	8003802 <memchr+0x1a>
 80037fa:	7804      	ldrb	r4, [r0, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	428c      	cmp	r4, r1
 8003800:	d1f6      	bne.n	80037f0 <memchr+0x8>
 8003802:	bd10      	pop	{r4, pc}

08003804 <memcpy>:
 8003804:	440a      	add	r2, r1
 8003806:	4291      	cmp	r1, r2
 8003808:	f100 33ff 	add.w	r3, r0, #4294967295
 800380c:	d100      	bne.n	8003810 <memcpy+0xc>
 800380e:	4770      	bx	lr
 8003810:	b510      	push	{r4, lr}
 8003812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003816:	4291      	cmp	r1, r2
 8003818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800381c:	d1f9      	bne.n	8003812 <memcpy+0xe>
 800381e:	bd10      	pop	{r4, pc}

08003820 <_realloc_r>:
 8003820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003824:	4607      	mov	r7, r0
 8003826:	4614      	mov	r4, r2
 8003828:	460d      	mov	r5, r1
 800382a:	b921      	cbnz	r1, 8003836 <_realloc_r+0x16>
 800382c:	4611      	mov	r1, r2
 800382e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003832:	f7ff bc3b 	b.w	80030ac <_malloc_r>
 8003836:	b92a      	cbnz	r2, 8003844 <_realloc_r+0x24>
 8003838:	f7ff fbce 	bl	8002fd8 <_free_r>
 800383c:	4625      	mov	r5, r4
 800383e:	4628      	mov	r0, r5
 8003840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003844:	f000 f81a 	bl	800387c <_malloc_usable_size_r>
 8003848:	4284      	cmp	r4, r0
 800384a:	4606      	mov	r6, r0
 800384c:	d802      	bhi.n	8003854 <_realloc_r+0x34>
 800384e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003852:	d8f4      	bhi.n	800383e <_realloc_r+0x1e>
 8003854:	4621      	mov	r1, r4
 8003856:	4638      	mov	r0, r7
 8003858:	f7ff fc28 	bl	80030ac <_malloc_r>
 800385c:	4680      	mov	r8, r0
 800385e:	b908      	cbnz	r0, 8003864 <_realloc_r+0x44>
 8003860:	4645      	mov	r5, r8
 8003862:	e7ec      	b.n	800383e <_realloc_r+0x1e>
 8003864:	42b4      	cmp	r4, r6
 8003866:	4622      	mov	r2, r4
 8003868:	4629      	mov	r1, r5
 800386a:	bf28      	it	cs
 800386c:	4632      	movcs	r2, r6
 800386e:	f7ff ffc9 	bl	8003804 <memcpy>
 8003872:	4629      	mov	r1, r5
 8003874:	4638      	mov	r0, r7
 8003876:	f7ff fbaf 	bl	8002fd8 <_free_r>
 800387a:	e7f1      	b.n	8003860 <_realloc_r+0x40>

0800387c <_malloc_usable_size_r>:
 800387c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003880:	1f18      	subs	r0, r3, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	bfbc      	itt	lt
 8003886:	580b      	ldrlt	r3, [r1, r0]
 8003888:	18c0      	addlt	r0, r0, r3
 800388a:	4770      	bx	lr

0800388c <_init>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr

08003898 <_fini>:
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389a:	bf00      	nop
 800389c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389e:	bc08      	pop	{r3}
 80038a0:	469e      	mov	lr, r3
 80038a2:	4770      	bx	lr
